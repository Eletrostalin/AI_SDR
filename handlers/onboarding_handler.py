from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from db.db import SessionLocal
from db.models import CompanyInfo
from states.states import OnboardingState
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(OnboardingState.waiting_for_company_name)
async def handle_company_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    await state.update_data(company_name=message.text)
    await state.set_state(OnboardingState.waiting_for_industry)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")


@router.message(OnboardingState.waiting_for_industry)
async def handle_industry(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    await state.update_data(industry=message.text)
    await state.set_state(OnboardingState.waiting_for_region)
    await message.answer("–ö–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–±–æ—Ç—ã –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?")


@router.message(OnboardingState.waiting_for_region)
async def handle_region(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞.
    """
    await state.update_data(region=message.text)
    await state.set_state(OnboardingState.waiting_for_contact_email)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π email –¥–ª—è —Å–≤—è–∑–∏.")


@router.message(OnboardingState.waiting_for_contact_email)
async def handle_contact_email(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ email.
    """
    await state.update_data(contact_email=message.text)
    await state.set_state(OnboardingState.waiting_for_contact_phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å').")


@router.message(OnboardingState.waiting_for_contact_phone)
async def handle_contact_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(contact_phone=message.text)
    await state.set_state(OnboardingState.waiting_for_additional_details)
    await message.answer("–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")


@router.message(OnboardingState.waiting_for_additional_details)
async def handle_additional_details(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(additional_info=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    await state.set_state(OnboardingState.confirmation)
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data.get('company_name')}\n"
        f"üìå –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {data.get('industry')}\n"
        f"üìå –†–µ–≥–∏–æ–Ω: {data.get('region')}\n"
        f"üìå Email: {data.get('contact_email')}\n"
        f"üìå –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {data.get('additional_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–î–∞'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç'."
    )


@router.message(OnboardingState.confirmation)
async def handle_confirmation(message: Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        company_id = data.get("company_id")

        if not company_id:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.")
            await state.set_state(OnboardingState.waiting_for_company_name)
            return

        db: Session = SessionLocal()
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É CompanyInfo
            company_info = CompanyInfo(
                company_id=company_id,
                company_name=data.get("company_name"),
                industry=data.get("industry"),
                region=data.get("region"),
                contact_email=data.get("contact_email"),
                contact_phone=data.get("contact_phone"),
                additional_info=data.get("additional_info"),
            )
            db.add(company_info)
            db.commit()

            await message.answer(
                "üéâ –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            db.close()

        await state.clear()
    else:
        await state.set_state(OnboardingState.waiting_for_company_name)
        await message.answer("–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")