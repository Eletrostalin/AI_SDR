from aiogram import Bot, Router
from aiogram.fsm.context import FSMContext
from langchain.prompts import PromptTemplate
from langchain.agents import AgentExecutor, Tool
from langchain.memory import ConversationBufferMemory
from langchain.chat_models import ChatOpenAI
from db.db import SessionLocal
from db.models import CompanyInfo
from aiogram.types import Message
import logging

from states.states import OnboardingState

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
def get_onboarding_tools():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    def validate_email(input_text):
        import re
        return re.match(r"[^@]+@[^@]+\.[^@]+", input_text)

    def validate_phone(input_text):
        import re
        return re.match(r"^\+?[0-9\s\-\(\)]+$", input_text)

    tools = [
        Tool(
            name="company_name",
            func=lambda input_text: input_text.strip(),
            description="–°–æ–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
        Tool(
            name="industry",
            func=lambda input_text: input_text.strip(),
            description="–°–æ–±—Ä–∞—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
        Tool(
            name="region",
            func=lambda input_text: input_text.strip(),
            description="–°–æ–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
        Tool(
            name="contact_email",
            func=lambda input_text: input_text.strip() if validate_email(input_text) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.",
            description="–°–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
        Tool(
            name="contact_phone",
            func=lambda input_text: input_text.strip() if validate_phone(input_text) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            description="–°–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
        Tool(
            name="additional_info",
            func=lambda input_text: input_text.strip() if input_text else "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            description="–°–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏."
        ),
    ]
    return tools

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ LangChain
def create_onboarding_agent():
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å LangChain.
    """
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    tools = get_onboarding_tools()

    prompt = PromptTemplate(
        input_variables=["chat_history", "input"],
        template=(
            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã "
            "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã, —É—Ç–æ—á–Ω–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è.\n"
            "{chat_history}\n\n"
            "–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {input}\n"
        )
    )

    return AgentExecutor.from_agent_and_tools(
        agent="zero-shot-react-description",
        tools=tools,
        llm=llm,
        memory=memory,
        verbose=True,
        prompt=prompt,
    )

@router.message(state=OnboardingState.waiting_for_first_response)
async def handle_first_response(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        chat_id = message.chat.id
        text = message.text  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥-–∞–≥–µ–Ω—Ç
        await handle_onboarding_with_agent(chat_id=chat_id, text=text, bot=bot)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
async def handle_onboarding_with_agent(chat_id: int, text: str, bot: Bot):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º —Å –ø–æ–º–æ—â—å—é –∞–≥–µ–Ω—Ç–∞ LangChain, —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é.
    """
    db = SessionLocal()
    try:
        agent = create_onboarding_agent()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        company_data = db.query(CompanyInfo).filter_by(chat_id=str(chat_id)).first()
        collected_data = {
            "company_name": company_data.company_name if company_data else None,
            "industry": company_data.industry if company_data else None,
            "region": company_data.region if company_data else None,
            "contact_email": company_data.contact_email if company_data else None,
            "contact_phone": company_data.contact_phone if company_data else None,
            "additional_info": company_data.additional_info if company_data else None,
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        incomplete_fields = [key for key, value in collected_data.items() if not value]

        # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        if not incomplete_fields:
            await bot.send_message(
                chat_id=chat_id,
                text=(
                    "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {collected_data['company_name']}\n"
                    f"üìå –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {collected_data['industry']}\n"
                    f"üìå –†–µ–≥–∏–æ–Ω: {collected_data['region']}\n"
                    f"üìå Email: {collected_data['contact_email']}\n"
                    f"üìå –¢–µ–ª–µ—Ñ–æ–Ω: {collected_data['contact_phone']}\n"
                    f"üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {collected_data['additional_info']}\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
                )
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        result = agent.run(input=text)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"–ê–≥–µ–Ω—Ç —Å–æ–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–µ: {result}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for field, value in result.items():
            if field in collected_data:
                collected_data[field] = value

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
        if company_data:
            for field, value in collected_data.items():
                setattr(company_data, field, value)
        else:
            company_data = CompanyInfo(chat_id=str(chat_id), **collected_data)
            db.add(company_data)

        db.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(chat_id=chat_id, text=f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {result}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}", exc_info=True)
        await bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()