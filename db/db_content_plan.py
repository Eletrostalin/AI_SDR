import json

from sqlalchemy.orm import Session
from datetime import datetime

from db.db import SessionLocal
from db.models import Campaigns, ChatThread, ContentPlan, Waves
from logger import logger
from sqlalchemy.exc import SQLAlchemyError


def get_campaign_by_thread_id(db: Session, thread_id: int) -> Campaigns | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id.
    """
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ thread_id={thread_id}")
        return db.query(Campaigns).filter_by(thread_id=thread_id).first()
    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
        return None


def create_content_plan(
        db: Session,
        company_id: int,
        chat_id: int,
        description: dict,
        wave_count: int
) -> ContentPlan | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    try:
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ ORM
        campaign = db.query(Campaigns)\
            .filter_by(company_id=company_id, status="active")\
            .order_by(Campaigns.created_at.desc())\
            .first()

        if not campaign:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
            return None

        campaign_id = campaign.campaign_id
        logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º campaign_id={campaign_id} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: chat_id={chat_id}, wave_count={wave_count}")
        logger.debug(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {description}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ JSON-—Å—Ç—Ä–æ–∫—É
        description_json = json.dumps(description, ensure_ascii=False)

        content_plan = ContentPlan(
            company_id=company_id,
            telegram_id=str(chat_id),
            description=description_json,
            wave_count=wave_count,
            campaign_id=campaign_id
        )
        db.add(content_plan)
        db.commit()
        db.refresh(content_plan)

        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: id={content_plan.content_plan_id}")
        return content_plan
    except SQLAlchemyError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        db.rollback()
        return None


def add_wave(
        db: Session,
        content_plan_id: int,
        company_id: int,
        campaign_id: int,
        send_date: str,
        subject: str
) -> Waves | None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ª–Ω—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω.
    """
    try:
        logger.debug(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω—ã: content_plan_id={content_plan_id}, campaign_id={campaign_id}")
        logger.debug(f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_date}, üì¢ –¢–µ–º–∞: {subject}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
        send_date_parsed = datetime.strptime(send_date, "%Y-%m-%d").date()

        if not subject.strip():
            raise ValueError("–ü–æ–ª–µ 'subject' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        new_wave = Waves(
            content_plan_id=content_plan_id,
            company_id=company_id,
            campaign_id=campaign_id,
            send_date=send_date_parsed,
            subject=subject,
        )
        db.add(new_wave)
        db.commit()
        db.refresh(new_wave)

        logger.info(f"‚úÖ –í–æ–ª–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: id={new_wave.wave_id}, subject={subject}")
        return new_wave
    except (SQLAlchemyError, ValueError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–Ω—ã: {e}", exc_info=True)
        db.rollback()
        return None

def get_content_plans_by_campaign_id(db: Session, campaign_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy.
    :param campaign_id: ID –∫–∞–º–ø–∞–Ω–∏–∏.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ContentPlan.
    """
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign_id}")
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign_id).all()
        if not content_plans:
            logger.info(f"–î–ª—è campaign_id={campaign_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        return content_plans
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign_id}: {e}", exc_info=True)
        return []



