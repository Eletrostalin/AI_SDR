from aiogram.types import FSInputFile
from sqlalchemy.sql import text
from aiogram.filters import StateFilter
from db.db_campaign import create_campaign_and_thread, update_campaign_filters
from db.segmentation import EMAIL_SEGMENT_TRANSLATIONS
from handlers.content_plan_handlers.content_plan_handlers import handle_add_content_plan
from logger import logger
from db.db import SessionLocal
from promts.campaign_promt import EMAIL_SEGMENT_COLUMNS
from states.states import AddCampaignState
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from utils.segment_utils import extract_filters_from_text, apply_filters_to_email_table, generate_excel_from_df

router = Router()


@router.message(StateFilter(None))
async def handle_add_campaign(message: Message, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–∞–º–ø–∞–Ω–∏—é. –Ø –ø–æ–º–æ–≥—É –í–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ üè∑Ô∏è")

    await state.set_state(AddCampaignState.waiting_for_campaign_name)


@router.message(StateFilter(AddCampaignState.waiting_for_campaign_name))
async def process_campaign_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö –≤ create_campaign_and_thread.
    –§–∏–ª—å—Ç—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ–∑–∂–µ.
    """
    campaign_name = message.text.strip()

    if not campaign_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    chat_id = message.chat.id
    bot = message.bot

    try:
        with SessionLocal() as db:
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ chat_id
            company = db.execute(
                text("SELECT company_id FROM companies WHERE chat_id = :chat_id"),
                {"chat_id": str(chat_id)}
            ).fetchone()
            if not company:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            company_id = company[0]

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º email_table_id
            email_table = db.execute(
                text("SELECT email_table_id FROM email_tables WHERE company_id = :company_id"),
                {"company_id": company_id}
            ).fetchone()
            email_table_id = email_table[0] if email_table else None

            # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
            campaign_data = {
                "campaign_name": campaign_name,
                "company_id": company_id,
                "email_table_id": email_table_id,
                "status": "active",
                "status_for_user": True
            }

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–∞–º–ø–∞–Ω–∏—é –∏ —Ç–µ–º—É —á–∞—Ç–∞
            new_campaign = await create_campaign_and_thread(bot, db, chat_id, campaign_data)

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º state (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        campaign_data["campaign_id"] = new_campaign.campaign_id
        await state.update_data(campaign_data=campaign_data)

        # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏–ª—å—Ç—Ä—ã
        segment_columns = ", ".join(
            EMAIL_SEGMENT_TRANSLATIONS.get(col, col) for col in EMAIL_SEGMENT_COLUMNS
        )

        await message.bot.send_message(
            chat_id=chat_id,
            message_thread_id=new_campaign.thread_id,
            text=f"(–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)\n\n"
                 f"üîπ {segment_columns}\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                 f"\n–ö—Ä–∏—Ç–µ—Ä–∏–π - –ó–Ω–∞—á–µ–Ω–∏–µ\n\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π.\n"
                 f"–ü—Ä–∏–º–µ—Ä:\n"
                 f"\n–†–µ–≥–∏–æ–Ω - –ú–æ—Å–∫–≤–∞\n–ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ - –°–µ—Ä–≥–µ–π\n"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
        await message.answer(
            f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è **¬´{campaign_name}¬ª** —Å–æ–∑–¥–∞–Ω–∞! "
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –µ—ë —Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n\n"
            f"üìå –ù–∞–π–¥–∏—Ç–µ —Ç–µ–º—É: ¬´{campaign_name}¬ª –≤ —Å–ø–∏—Å–∫–µ —Ç–µ–º."
        )

        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await state.set_state(AddCampaignState.waiting_for_filters)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AddCampaignState.waiting_for_filters))
async def process_filters(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –≤ –ë–î
    –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏.
    """
    user_input = message.text.strip()

    try:
        filters = extract_filters_from_text(user_input)

        if not filters:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return

        state_data = await state.get_data()
        campaign_data = state_data.get("campaign_data", {})
        company_id = campaign_data.get("company_id")
        campaign_id = campaign_data.get("campaign_id")
        email_table_id = campaign_data.get("email_table_id")

        if not company_id or not campaign_id or not email_table_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ö–∞–º–ø–∞–Ω–∏—è –∏–ª–∏ email-—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        with SessionLocal() as db:
            # üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_df = apply_filters_to_email_table(db, email_table_id, filters)

            if filtered_df.empty:
                await message.reply("‚ö†Ô∏è –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
                return

            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –ë–î
            if not update_campaign_filters(db, campaign_id, filters):
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏.")
                return

            # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏
            excel_path = generate_excel_from_df(filtered_df, company_id, campaign_id)

        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_document(
            FSInputFile(excel_path),
            caption="üìÇ –ì–æ—Ç–æ–≤–æ! üìä –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞."
        )

        # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        campaign_data["filters"] = filters
        await state.update_data(campaign_data=campaign_data)

        await message.reply("–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
        await handle_add_content_plan(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

