import asyncio
import json
from sqlalchemy.orm import Session

from db.models import Templates
from logger import logger
import uuid

from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model

# üîπ ID Google –¢–∞–±–ª–∏—Ü—ã (–≤–æ–∑—å–º–∏ –∏–∑ —Å—Å—ã–ª–∫–∏)
SHEET_ID = "1YXv8CcjB_iOhDKAJZMkUV7BAmKE9x1kUrsN6cCWg2I8"
SHEET_NAME = "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ



def generate_lead_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π lead_id."""
    return str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä


async def generate_drafts_for_wave(db: Session, df, wave):
    """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã. """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id} (–ª–∏–¥–æ–≤: {len(df)})")

    template = db.query(Templates).filter_by(content_plan_id=wave.content_plan_id).first()
    if not template:
        logger.error(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    email_subject = wave.subject

    batch_size = 50
    leads_batches = [df[i:i + batch_size] for i in range(0, len(df), batch_size)]

    for batch in leads_batches:
        tasks = [generate_draft_for_lead(template, lead, email_subject, wave.wave_id) for _, lead in batch.iterrows()]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        successful_drafts = [res for res in results if isinstance(res, dict)]
        append_drafts_to_sheet(SHEET_ID, SHEET_NAME, successful_drafts)


async def generate_draft_for_lead(template, lead_data, subject, wave_id):
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞. """
    lead_id = lead_data.get("lead_id")
    email = lead_data.get("email")
    company_name = lead_data.get("company_name", "–ö–ª–∏–µ–Ω—Ç")

    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è lead_id={lead_id}...")

    prompt = f"""
    –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:
    {template.text}

    –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:
    {json.dumps(lead_data, ensure_ascii=False, indent=2)}

    –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.
    """

    for attempt in range(3):
        try:
            response = await send_to_model(prompt)
            break
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {lead_id}: {e}")
            if attempt == 2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è {lead_id}")
                return None
            await asyncio.sleep(2)

    return {
        "wave_id": wave_id,
        "lead_id": lead_id,
        "email": email,
        "company_name": company_name,
        "subject": subject,
        "text": response.strip()
    }