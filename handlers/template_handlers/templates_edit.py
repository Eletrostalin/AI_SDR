from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram import types, Router
from aiogram.utils.keyboard import InlineKeyboardBuilder

from agents.tempate_agent import async_template_edit_tool
from db.db import SessionLocal
from db.models import Waves, Templates
from logger import logger
from states.states import TemplateStates

router = Router()

@router.callback_query(lambda c: c.data.startswith("edit_template:"))
async def start_edit_template(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.
    """
    wave_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"‚úèÔ∏è [User {user_id}] —Ä–µ—à–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –≤–æ–ª–Ω—ã {wave_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤–æ–ª–Ω–æ–π
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave or not wave.template:
            await callback.message.reply("–®–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        template = wave.template

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.reply(
            f"‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ —à–∞–±–ª–æ–Ω:\n\n"
            f"üìå **–¢–µ–º–∞:** {template.subject}\n"
            f"‚úâÔ∏è **–¢–µ–∫—Å—Ç:** {template.template_content}\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å."
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º wave_id –∏ —à–∞–±–ª–æ–Ω –≤ FSM
        await state.update_data(wave_id=wave_id, template_id=template.template_id)
        await state.set_state(TemplateStates.waiting_for_edit_input)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.message(TemplateStates.waiting_for_edit_input)
async def handle_template_edit(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω —Å –ø–æ–º–æ—â—å—é AI –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    db = SessionLocal()
    state_data = await state.get_data()

    wave_id = state_data.get("wave_id")
    template_id = state_data.get("template_id")
    user_comments = message.text.strip()

    logger.info(f"‚úèÔ∏è [User {user_id}] –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {user_comments[:100]}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
        template = db.query(Templates).filter_by(template_id=template_id).first()
        if not template:
            await message.reply("–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_request = {
            "current_template": template.template_content,
            "comments": user_comments
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º AI-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        edited_template = await async_template_edit_tool(edit_request)

        if not edited_template or edited_template.strip() == "":
            await message.reply("‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.reply(f"‚úçÔ∏è **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n\n{edited_template}")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"confirm_edit:{template_id}"))
        keyboard.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"retry_edit:{template_id}"))

        await message.reply("–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã –º–æ–∂–µ—Ç–µ —É—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ FSM, –Ω–æ –ø–æ–∫–∞ **–Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É**
        await state.update_data(edited_template=edited_template)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("confirm_edit:"))
async def confirm_template_edit(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = callback.from_user.id
    state_data = await state.get_data()
    template_id = int(callback.data.split(":")[1])

    db = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ FSM
        new_template_text = state_data.get("edited_template")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ
        template = db.query(Templates).filter_by(template_id=template_id).first()
        if not template:
            await callback.message.reply("–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –≤ –±–∞–∑–µ
        template.template_content = new_template_text
        db.commit()

        logger.info(f"‚úÖ [User {user_id}] –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω {template_id}.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.reply("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("retry_edit:"))
async def retry_template_edit(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.
    """
    user_id = callback.from_user.id
    template_id = int(callback.data.split(":")[1])

    logger.info(f"‚úèÔ∏è [User {user_id}] —Ö–æ—á–µ—Ç –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω {template_id}.")

    await callback.message.reply("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateStates.waiting_for_edit_input)