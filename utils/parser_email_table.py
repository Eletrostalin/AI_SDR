import os
import pandas as pd
import json
import logging
from classifier import client
from db.db import engine, SessionLocal
from db.dynamic_table_manager import create_dynamic_email_table
from db.email_table_db import process_table_operations
from db.segmentation import EMAIL_SEGMENT_COLUMNS
from promts.email_table_promt import generate_column_mapping_prompt
from sqlalchemy.orm import Session
from sqlalchemy import text, inspect

logger = logging.getLogger(__name__)

async def process_email_table(file_path: str, segment_table_name: str, bot, message) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É Excel, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫, –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É.
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª—ã
        df = pd.read_excel(file_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
        if df.empty:
            await message.reply("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return False

        # === –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
        df.dropna(how="all", inplace=True)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df.fillna("", inplace=True)  # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df[~df.apply(lambda row: row.astype(str).str.strip().eq("").all(), axis=1)]  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–µ

        if df.empty:
            logger.warning("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            await message.reply("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return False

        # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        df.columns = df.columns.str.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
        user_columns = df.columns.tolist()
        logger.debug(f"–ö–æ–ª–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_columns}")

        # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ ===
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫...")
        prompt = generate_column_mapping_prompt(user_columns)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        mapping = json.loads(response.choices[0].message.content.strip())
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: {mapping}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        if not mapping or not any(mapping.values()):
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")
            logger.warning("–ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.")
            return False

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame
        df.rename(columns=mapping, inplace=True)
        logger.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")
        logger.debug(f"–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {EMAIL_SEGMENT_COLUMNS}")

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ e-mail –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –±–∞–∑—É ===
        email_column = next((col for col in df.columns if "email" in col.lower()), None)

        if email_column:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ e-mail
            total_rows = len(df)
            df = df[df[email_column].str.strip() != ""]  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ e-mail
            removed_rows = total_rows - len(df)  # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —É–±—Ä–∞–ª–∏

            if removed_rows > 0:
                await message.reply(
                    f"–í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ {removed_rows} –∑–∞–ø–∏—Å–µ–π **–Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã**, —Ç–∞–∫ –∫–∞–∫ e-mail –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π e-mail –≤ —è—á–µ–π–∫–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            df[email_column] = df[email_column].str.extract(r"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})")

            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã e-mail'—ã. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —è—á–µ–π–∫–µ.")
        else:
            await message.reply(
                "–û—à–∏–±–∫–∞: –í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ e-mail. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ e-mail –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ.")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing_columns = [col for col in EMAIL_SEGMENT_COLUMNS if col not in df.columns]
        if missing_columns:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞: {missing_columns}")
            await message.reply("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
            return False

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        df = df[[col for col in df.columns if col in EMAIL_SEGMENT_COLUMNS]]
        logger.info(f"–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if df.empty:
            logger.warning("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫.")
            await message.reply("–í –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return False

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ===
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{segment_table_name}'...")
        inspector = inspect(engine)
        if not inspector.has_table(segment_table_name):
            create_dynamic_email_table(engine, segment_table_name)
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{segment_table_name}' —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{segment_table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
        chat_id = str(message.chat.id)
        file_name = os.path.basename(file_path)
        return process_table_operations(df, segment_table_name, chat_id, message, file_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False


def count_table_rows(table_name: str) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.
    """
    db: Session = SessionLocal()
    try:
        query = text(f"SELECT COUNT(*) FROM {table_name}")
        result = db.execute(query).scalar()
        return result or 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
        return 0
    finally:
        db.close()