import asyncio
import email
import logging
from email.header import decode_header
from imapclient import IMAPClient
from sqlalchemy.orm import sessionmaker
import httpx

from config import IMAP_PORT, EMAIL_ACCOUNT, IMAP_SERVER, EMAIL_PASSWORD
from db.db import engine  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Wave –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

from db.models import Waves

# üîπ ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
GENERAL_CHAT_ID = -1001234567890  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ Telegram-—á–∞—Ç–∞

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é SQLAlchemy
SessionLocal = sessionmaker(bind=engine)

async def check_new_emails():
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.
    """
    try:
        with IMAPClient(IMAP_SERVER, port=IMAP_PORT) as client:
            client.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
            client.select_folder("INBOX")  # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ"

            while True:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞...")
                messages = client.search(["UNSEEN"])  # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞

                if messages:
                    logger.info(f"üì© –ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")

                    for msgid in messages:
                        raw_message = client.fetch(msgid, ["RFC822"])[msgid][b"RFC822"]
                        email_message = email.message_from_bytes(raw_message)

                        subject, encoding = decode_header(email_message["Subject"])[0]
                        if isinstance(subject, bytes):
                            subject = subject.decode(encoding or "utf-8")

                        logger.info(f"üìß –í—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π: {subject}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Ç–µ–º–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ wave
                        with SessionLocal() as db:
                            wave = db.query(Waves).filter(Waves.subject == subject).first()

                            if wave:
                                logger.info(f"‚úÖ –¢–µ–º–∞ –ø–∏—Å—å–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–æ–ª–Ω–æ–π ID {wave.wave_id}")
                                await send_telegram_message(
                                    GENERAL_CHAT_ID,
                                    f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ **{wave.subject}**!"
                                )

                        # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                        client.add_flags(msgid, ["\\Seen"])

                # ‚è≥ –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—á—Ç—ã: {e}", exc_info=True)


async def send_telegram_message(chat_id, text):
    async with httpx.AsyncClient() as client:
        await client.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": text, "parse_mode": "Markdown"})


async def main():
    """
    –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã.
    """
    while True:
        await check_new_emails()
        await asyncio.sleep(10)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


if __name__ == "__main__":
    asyncio.run(main())