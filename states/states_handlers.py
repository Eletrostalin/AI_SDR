from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import CallbackQuery

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
from handlers.company_handlers.company_handlers import (
    process_company_information,
    handle_add_company,
    confirm_company_information,
    process_edit_company_information,
    confirm_edit_company_information
)

from handlers.campaign_handlers.campaign_handlers import (
    process_campaign_name,
    process_filters
)
from handlers.content_plan_handlers.content_plan_handlers import process_audience_style, \
    process_send_date #process_restricted_topics, process_wave_name
from handlers.email_table_handler import handle_file_upload, handle_email_choice_callback, handle_campaign_decision, \
    handle_first_question_decision, handle_second_question_decision
from handlers.onboarding_handler import (
    handle_brief_upload, confirm_brief, handle_missing_fields_response)
from handlers.template_handlers.template_handler import handle_user_input, confirm_template
from states.states import (
    OnboardingState,
    EditCompanyState,
    AddCampaignState,
    AddContentPlanState,
    AddCompanyState, TemplateStates, EmailProcessingDecisionState, EmailUploadState
)

from logger import logger


async def process_email_connections(message, state):
    pass


async def handle_onboarding_states(message: Message, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.
    """
    if current_state == OnboardingState.waiting_for_brief.state:
        await handle_brief_upload(message, state)

    elif current_state == OnboardingState.missing_fields.state:
        await handle_missing_fields_response(message, state)

    elif current_state == OnboardingState.confirmation.state:
        await confirm_brief(message, state)

    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()


async def handle_email_upload_states(event: Message | CallbackQuery, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π email-—Ç–∞–±–ª–∏—Ü—ã.
    """
    logger.debug(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {current_state} | –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}")

    if isinstance(event, Message):  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_state == EmailUploadState.waiting_for_file_upload:
            await handle_file_upload(event, state)

        elif current_state == EmailUploadState.duplicate_email_check:
            await handle_email_choice_callback(event, state)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    elif isinstance(event, CallbackQuery):  # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å
        logger.warning(f"‚ö†Ô∏è Callback –ø–æ–ª—É—á–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ email, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {current_state}")
        await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


async def handle_email_processing_decisions(event: CallbackQuery, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏).
    """
    logger.debug(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞: {current_state} | –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}")

    if current_state == EmailProcessingDecisionState.waiting_for_more_files_decision:
        await handle_first_question_decision(event, state)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

    elif current_state == EmailProcessingDecisionState.waiting_for_campaign_decision:
        await handle_second_question_decision(event, state)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ä—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏

    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è callback: {current_state}.")
        await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
async def handle_edit_company_states(message: Message, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    if current_state == AddCompanyState.waiting_for_information.state:
        await process_company_information(message, state, bot=message.bot)
    elif current_state == AddCompanyState.waiting_for_company_name.state:
        await handle_add_company(message, state)
    elif current_state == AddCompanyState.waiting_for_confirmation.state:
        await confirm_company_information(message, state)
    elif current_state == EditCompanyState.waiting_for_updated_info.state:
        await process_edit_company_information(message, state)
    elif current_state == EditCompanyState.waiting_for_confirmation.state:
        await confirm_edit_company_information(message, state)
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
async def handle_add_campaign_states(message: Message, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏.
    """
    if current_state == AddCampaignState.waiting_for_campaign_name.state:
        await process_campaign_name(message, state)
    elif current_state == AddCampaignState.waiting_for_filters.state:
        await process_filters(message, state)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()


async def handle_add_content_plan_states(message: Message, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
    """
    # if current_state == AddContentPlanState.waiting_for_restricted_topics.state:
    #     await process_restricted_topics(message, state)
    if current_state == AddContentPlanState.waiting_for_audience_style.state:
        await process_audience_style(message, state)
    # elif current_state == AddContentPlanState.waiting_for_wave_name.state:  # –ù–æ–≤—ã–π —à–∞–≥
    #     await process_wave_name(message, state)
    elif current_state == AddContentPlanState.waiting_for_send_date.state:
        await process_send_date(message, state)


async def handle_template_states(message: Message, state: FSMContext, current_state: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤.
    """

    if current_state == TemplateStates.waiting_for_description.state:
        await handle_user_input(message, state)
    elif current_state == TemplateStates.waiting_for_confirmation.state:
        await confirm_template(message, state)
    # elif current_state == TemplateStates.refining_template.state:
    #     await refine_template(message, state)