import pandas as pd
import re
import json
import logging
from classifier import client
from db.db import engine
from db.dynamic_table_manager import create_dynamic_email_table
from db.email_table_db import process_table_operations
from db.segmentation import EMAIL_SEGMENT_COLUMNS
from sqlalchemy import inspect
from aiogram.fsm.context import FSMContext
from promts.email_table_promt import generate_column_mapping_prompt

logger = logging.getLogger(__name__)


def clean_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """ –û—á–∏—â–∞–µ—Ç DataFrame –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π. """
    df.dropna(how="all", inplace=True)
    df.fillna("", inplace=True)
    df = df[~df.apply(lambda row: row.astype(str).str.strip().eq("").all(), axis=1)]
    df.columns = df.columns.str.strip()
    return df


async def map_columns(user_columns: list) -> dict:
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –ò–ò –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. """
    logger.debug("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫...")

    prompt = generate_column_mapping_prompt(user_columns)

    logger.debug(f"üì§ –î–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ –º–æ–¥–µ–ª—å: {json.dumps({'messages': [{'role': 'user', 'content': prompt}]}, indent=2, ensure_ascii=False)}")

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )

    logger.debug(f"üì© –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {response}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
    raw_response = response.choices[0].message.content.strip() if response.choices else ""

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π ‚Äî –æ—à–∏–±–∫–∞
    if not raw_response:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.")
        return {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Markdown-–æ–±—ë—Ä—Ç–∫–∞, –∏ —É–¥–∞–ª—è–µ–º –µ—ë —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if raw_response.startswith("```json") and raw_response.endswith("```"):
        cleaned_response = re.sub(r"^```json\s*|\s*```$", "", raw_response).strip()
    else:
        cleaned_response = raw_response  # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–±—ë—Ä—Ç–∫–∏ –Ω–µ—Ç

    try:
        mapping = json.loads(cleaned_response)
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {raw_response}")
        return {}

    logger.debug(f"üîÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: {mapping}")

    return mapping if mapping and any(mapping.values()) else None


def count_emails_in_cell(cell):
    """ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ email –≤ —è—á–µ–π–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è '@' –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º –∏ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π. """
    if pd.isna(cell) or not isinstance(cell, str):
        return 0, []  # –ï—Å–ª–∏ –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞

    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    cell = re.sub(r"\s+", " ", cell.strip())

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º –∏ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
    parts = re.split(r"[ ,;]", cell)

    # –§–∏–ª—å—Ç—Ä—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ email-–∞–¥—Ä–µ—Å–∞ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å '@')
    emails = [part for part in parts if "@" in part]

    return len(emails), emails


def clean_and_validate_emails(df: pd.DataFrame) -> tuple:
    """–û—á–∏—â–∞–µ—Ç e-mail –∫–æ–ª–æ–Ω–∫–∏, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏—è."""

    email_column = next((col for col in df.columns if "email" in col.lower()), None)

    if not email_column:
        logger.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'email'.")
        return df, None, 0, [], []  # –ù–µ—Ç email-–∫–æ–ª–æ–Ω–∫–∏

    df[email_column] = df[email_column].astype(str).str.strip()

    multi_email_rows = []
    problematic_values = []

    logger.debug(f"üì© –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É email-–∫–æ–ª–æ–Ω–∫–∏: {email_column}")

    for index, value in df[email_column].items():
        logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {index + 1}: '{value}'")

        count, emails = count_emails_in_cell(value)

        if count > 1:
            logger.info(f"üìå –í —Å—Ç—Ä–æ–∫–µ {index + 1} –Ω–∞–π–¥–µ–Ω–æ {count} email: {emails}")
            multi_email_rows.append(index + 1)  # +1, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ Excel
            problematic_values.append(", ".join(emails))

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(multi_email_rows)} —Å—Ç—Ä–æ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email.")

    return df, email_column, len(multi_email_rows), multi_email_rows, problematic_values


async def save_cleaned_data(df: pd.DataFrame, segment_table_name: str, message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏."""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º `file_name` –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    state_data = await state.get_data()
    file_name = state_data.get("file_name")

    if not file_name:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞.")
        return False

    logger.debug(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è file_name: {file_name}")

    # **–î–æ–±–∞–≤–ª—è–µ–º file_name –≤ DataFrame**
    df["file_name"] = file_name  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞

    # **–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫**
    REQUIRED_COLUMNS = EMAIL_SEGMENT_COLUMNS + ["file_name"]
    MANDATORY_COLUMNS = ["email", "file_name"]  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏

    logger.debug(f"üìå REQUIRED_COLUMNS: {REQUIRED_COLUMNS}")
    logger.debug(f"üìå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ DataFrame –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {df.columns.tolist()}")

    # **–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏**
    df = df[[col for col in df.columns if col in REQUIRED_COLUMNS]]

    logger.debug(f"üìå –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {df.columns.tolist()}")

    # **–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ REQUIRED_COLUMNS –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö None**
    for col in REQUIRED_COLUMNS:
        if col not in df.columns:
            df[col] = None  # –ó–∞–ø–æ–ª–Ω—è–µ–º None, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ

    logger.debug(f"üìå –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö: {df.columns.tolist()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    missing_mandatory = [col for col in MANDATORY_COLUMNS if col not in df.columns]
    if missing_mandatory:
        await message.reply(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_mandatory)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    if not inspect(engine).has_table(segment_table_name):
        create_dynamic_email_table(engine, segment_table_name)
        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{segment_table_name}' —Å–æ–∑–¥–∞–Ω–∞.")

    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = str(message.chat.id)

    # –ü–µ—Ä–µ–¥–∞—ë–º `file_name` –≤ `process_table_operations`
    result = process_table_operations(df, file_name, chat_id, message, segment_table_name)

    if result:
        await message.reply(f"‚úÖ –ë–∞–∑–∞ email –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}.")
    else:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_name}.")

    return result