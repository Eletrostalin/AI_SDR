import pandas as pd
from sqlalchemy import Table, MetaData, insert, func
from sqlalchemy.sql import text
import logging
from db.models import EmailTable, Campaigns

from db.db import engine, SessionLocal
from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)


def process_table_operations(df: pd.DataFrame, file_name: str, chat_id: str, message, table_name) -> bool:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é, —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
    """
    db: Session = SessionLocal()
    try:
        from db.models import EmailTable, Company

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É `file_name`, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        if "file_name" not in df.columns:
            df["file_name"] = file_name

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ chat_id
        company = db.query(Company).filter(Company.chat_id == chat_id).first()
        if not company:
            message.reply("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é.")
            return False

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ EmailTable —Å `file_name`
        if not create_email_table_record(
                db,
                company_id=company.company_id,
                table_name=table_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `table_name`, –∞ –Ω–µ file_name
                description=f"–¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email ({file_name})"
        ):
            message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            return False

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î (—Ç–µ–ø–µ—Ä—å `file_name` –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ `df`)
        if save_data_to_db(df.to_dict(orient="records"), table_name, db):
            message.reply(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return True
        else:
            message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_name}.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: {table_name}")
            return False
    finally:
        db.close()

def save_data_to_db(data: list, table_name: str, db: Session):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email.

    :param data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    :param table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :return: True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    try:
        if not data:
            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {table_name}. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return False

        metadata = MetaData()
        table = Table(table_name, metadata, autoload_with=db.bind)

        logger.debug(f"üìå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ {table_name}: {data[:5]} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π)")
        logger.debug(f"üìå –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ {table_name}")

        stmt = insert(table).values(data)
        db.execute(stmt)
        db.commit()

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {table_name}: {e}", exc_info=True)
        db.rollback()
        return False

def check_table_exists(db: Session, table_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã.
    :return: True, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
    """
    try:
        query = text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = :table_name
        )
        """)
        result = db.execute(query, {"table_name": table_name}).scalar()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}", exc_info=True)
        return False

def get_table_data(db: Session, table_name: str, limit: int = 1000) -> list:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã.
    :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.
    :return: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    try:
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safe_table_name = f'"{table_name}"'
        query = text(f"SELECT * FROM {safe_table_name} LIMIT :limit")
        result = db.execute(query, {"limit": limit})

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .mappings() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä–∏
        return [dict(row) for row in result.mappings()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}", exc_info=True)
        return []

def create_email_table_record(db: Session, company_id: int, table_name: str, description: str = None) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ email_tables.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏.
    :param table_name: –ò–º—è email —Ç–∞–±–ª–∏—Ü—ã.
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ email —Ç–∞–±–ª–∏—Ü—ã.
    :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —Ç–∞–±–ª–∏—Ü—ã
        existing_record = db.query(EmailTable).filter(EmailTable.table_name == table_name).first()

        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            existing_record.updated_at = func.now()
            if description:
                existing_record.description = description
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            new_email_table = EmailTable(
                company_id=company_id,
                table_name=table_name
            )
            db.add(new_email_table)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ EmailTable: {e}", exc_info=True)
        db.rollback()
        return False

def get_table_by_campaign(campaign: Campaigns) -> str | None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–∞–º–ø–∞–Ω–∏–µ–π"""
    db = SessionLocal()
    try:
        table = db.query(EmailTable).filter_by(company_id=campaign.company_id).first()
        return table.table_name if table else None
    finally:
        db.close()