from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session

from db.db import SessionLocal
from db.db_campaign import get_campaign_by_thread_id
from db.models import Templates, Waves, ContentPlan, Campaigns, EmailTable, Company
import logging

from states.states import DraftStates

logger = logging.getLogger(__name__)
router = Router()


def get_company_tables_by_campaign(campaign):
    pass


@router.message(Command("add_drafts"))
async def add_drafts(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é, –∫–æ–º–ø–∞–Ω–∏—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    thread_id = message.message_thread_id  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
    user_id = message.from_user.id

    logger.info(f"üì® [User {user_id}] –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /add_drafts –≤ —Ç–µ–º–µ {thread_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    campaign = get_campaign_by_thread_id(thread_id)
    if not campaign:
        await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º company_id –∏ —Å–ø–∏—Å–æ–∫ tables_name
    company_id, tables_names = get_company_tables_by_campaign(campaign)
    if not company_id or not tables_names:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(
        campaign_id=campaign.campaign_id,
        company_id=company_id,
        tables_names=tables_names
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"‚úÖ [User {user_id}] –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–º–ø–∞–Ω–∏—è {campaign.campaign_id} –∏ company_id {company_id}")

    # üìå **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω**
    db = SessionLocal()
    try:
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()
        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"select_content_plan:{content_plan.content_plan_id}"
            ))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


# üìå 2. –í—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
@router.callback_query(lambda c: c.data.startswith("select_content_plan:"))
async def select_content_plan(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üìå [User {user_id}] –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
        content_plan = db.query(ContentPlan).filter_by(content_plan_id=content_plan_id).first()
        if not content_plan:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()

        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"select_wave:{wave.wave_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:", reply_markup=keyboard.as_markup())

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"‚úÖ [User {user_id}] –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(waves)} –≤–æ–ª–Ω.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º content_plan_id –≤ FSM
        await state.update_data(content_plan_id=content_plan_id)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {content_plan_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()