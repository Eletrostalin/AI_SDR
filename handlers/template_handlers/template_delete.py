from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session

from db.db import SessionLocal
from db.models import Templates, Waves, ContentPlan, Campaigns

import logging

from states.states import TemplateStates

logger = logging.getLogger(__name__)
router = Router()


# üìå 1. –ö–æ–º–∞–Ω–¥–∞ /delete_template - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@router.message(Command("delete_template"))
async def delete_template(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.
    """
    db = SessionLocal()
    thread_id = message.message_thread_id  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
    user_id = message.from_user.id

    logger.info(f"üóëÔ∏è [User {user_id}] –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /delete_template –≤ —Ç–µ–º–µ {thread_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id
        campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if not campaign:
            await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()

        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"delete_content_plan:{content_plan.content_plan_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º campaign_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(campaign_id=campaign.campaign_id)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


# üìå 2. –í—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
@router.callback_query(lambda c: c.data.startswith("delete_content_plan:"))
async def delete_content_plan(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üìå [User {user_id}] –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()

        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"delete_wave:{wave.wave_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É, —à–∞–±–ª–æ–Ω –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º content_plan_id –≤ FSM
        await state.update_data(content_plan_id=content_plan_id)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {content_plan_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


# üìå 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@router.callback_query(lambda c: c.data.startswith("delete_wave:"))
async def delete_wave(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    wave_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üóëÔ∏è [User {user_id}] –≤—ã–±—Ä–∞–ª –≤–æ–ª–Ω—É {wave_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ª–Ω—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–µ–π —à–∞–±–ª–æ–Ω
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave or not wave.template:
            await callback.message.reply("–î–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        template = wave.template

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à–∞–±–ª–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        template_message = (
            f"üì© **–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞**\n\n"
            f"üìå **–¢–µ–º–∞:** {template.subject}\n\n"
            f"‚úâÔ∏è **–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:**\n{template.template_content}"
        )
        await callback.message.reply(template_message)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_template:{template.template_id}"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete"))

        await callback.message.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º wave_id –∏ template_id –≤ FSM
        await state.update_data(wave_id=wave_id, template_id=template.template_id)
        await state.set_state(TemplateStates.waiting_for_delete_confirmation)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {wave_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


# üìå 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@router.callback_query(lambda c: c.data.startswith("confirm_delete_template:"))
async def confirm_delete_template(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: status = False).
    """
    template_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"‚úÖ [User {user_id}] –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ {template_id}")

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        template = db.query(Templates).filter_by(template_id=template_id).first()
        if not template:
            await callback.message.reply("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        template.status = False
        db.commit()

        await callback.message.reply("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


# üìå 5. –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.
    """
    await callback.message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()