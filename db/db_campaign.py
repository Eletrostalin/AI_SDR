from datetime import datetime
from sqlalchemy.sql import text
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from db.models import Campaigns, ChatThread, Company
from logger import logger


async def create_campaign_and_thread(bot, db: Session, chat_id: int, campaign_data: dict) -> Campaigns:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏.

    1. –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –≤ Telegram.
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ `thread_id` –≤ –ë–î –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π.
    3. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (email_table_id, —Å–≤—è–∑–∏) –≤ –∫–∞–º–ø–∞–Ω–∏—é.

    –§–∏–ª—å—Ç—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ–∑–∂–µ.

    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    :param db: –°–µ—Å—Å–∏—è –ë–î.
    :param chat_id: ID —á–∞—Ç–∞.
    :param campaign_data: –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤).
    :return: –û–±—ä–µ–∫—Ç Campaigns.
    """
    try:
        company_id = campaign_data["company_id"]
        campaign_name = campaign_data["campaign_name"]
        email_table_id = campaign_data.get("email_table_id")

        # üîπ –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º `thread_id` –≤ `campaign_data`)
        topic = await bot.create_forum_topic(chat_id=chat_id, name=campaign_name)
        thread_id = topic.message_thread_id
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞: thread_id={thread_id}, chat_id={chat_id}")

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ç–µ–º–∞ –≤ –ë–î (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        existing_thread = db.query(ChatThread).filter_by(thread_id=thread_id).first()
        if existing_thread:
            logger.warning(f"‚ö†Ô∏è –¢–µ–º–∞ —Å thread_id={thread_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.")
        else:
            # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –≤ –ë–î
            new_thread = ChatThread(chat_id=chat_id, thread_id=thread_id, thread_name=campaign_name)
            db.add(new_thread)
            db.commit()
            logger.info(f"‚úÖ –ù–æ–≤–∞—è —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: thread_id={thread_id}")

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–º–ø–∞–Ω–∏—è
        existing_campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if existing_campaign:
            logger.warning(f"‚ö†Ô∏è –ö–∞–º–ø–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–µ–º—ã thread_id={thread_id}. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.")
            existing_campaign.email_table_id = email_table_id
            db.commit()
            return existing_campaign

        # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        start_date = (
            datetime.strptime(campaign_data.get("start_date"), "%d.%m.%Y").strftime("%Y-%m-%d")
            if campaign_data.get("start_date") else None
        )
        end_date = (
            datetime.strptime(campaign_data.get("end_date"), "%d.%m.%Y").strftime("%Y-%m-%d")
            if campaign_data.get("end_date") else None
        )

        # üîπ –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
        new_campaign = Campaigns(
            company_id=company_id,
            thread_id=thread_id,  # üîπ –í—Å–µ–≥–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π thread_id
            campaign_name=campaign_name,
            email_table_id=email_table_id,  # üîπ Email-—Ç–∞–±–ª–∏—Ü–∞
            status="active",
            status_for_user=True
        )

        db.add(new_campaign)
        db.commit()
        db.refresh(new_campaign)

        logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: id={new_campaign.campaign_id}, name={campaign_name}")
        return new_campaign

    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
        raise


def get_campaigns_by_company_id(db: Session, company_id: int) -> list[Campaigns]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Campaigns.
    """
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ company_id={company_id}")
    try:
        campaigns = db.query(Campaigns).filter_by(company_id=company_id).all()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(campaigns)} –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è company_id={company_id}")
        return campaigns
    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è company_id={company_id}: {e}", exc_info=True)
        return []


def get_campaign_by_thread_id(db: Session, thread_id: int) -> Campaigns | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º thread_id.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param thread_id: ID —Ç–µ–º—ã (thread_id).
    :return: –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    return db.query(Campaigns).filter_by(thread_id=thread_id).first()