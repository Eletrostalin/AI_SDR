import asyncio
import json
import pandas as pd
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

from config import DATABASE_URL
from db.models import Templates, Waves, Base
from logger import logger
from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
  # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ PostgreSQL/MySQL
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# üîπ ID Google –¢–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)
SHEET_ID = "1YXv8CcjB_iOhDKAJZMkUV7BAmKE9x1kUrsN6cCWg2I8"
SHEET_NAME = "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏"

# üîπ –î–∞–Ω–Ω—ã–µ –≤–æ–ª–Ω—ã (–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
TEST_WAVE = Waves(
    wave_id=20,
    content_plan_id=24,
    campaign_id=59,
    company_id=121,
    send_date="2025-03-10 00:00:00",
    subject="–ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞"
)

# üîπ –¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
TEST_TEMPLATE = Templates(
    campaign_id=59,
    template_content=(
        "–£–≤–∞–∂–∞–µ–º—ã–µ –•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã,\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ –û–û–û –ú–æ–ª–æ–¥–µ—Ü —Å–µ—Ä–¥–µ—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤, "
        "–∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è 11 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞ –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ.\n\n"
        "–ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏, "
        "—á—Ç–æ–±—ã –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ—Å—Ç–æ "
        "–Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.\n\n"
        "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –¥–æ 5 –º–∞—Ä—Ç–∞.\n\n"
        "–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,\n"
        "–ö–æ–º–∞–Ω–¥–∞ –û–û–û –ú–æ–ª–æ–¥–µ—Ü\n\n"
        "P.S. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
    ),
    subject="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"
)

# üîπ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã
TEST_LEADS = pd.DataFrame([
    {"lead_id": 1, "email": "test1@example.com", "company_name": "–ö–æ–º–ø–∞–Ω–∏—è 1"},
    {"lead_id": 2, "email": "test2@example.com", "company_name": "–ö–æ–º–ø–∞–Ω–∏—è 2"},
])


async def generate_draft_for_lead(template, lead_data, subject, wave_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞ –¥–ª—è –ª–∏–¥–∞.
    """
    lead_id = lead_data.get("lead_id")
    email = lead_data.get("email")
    company_name = lead_data.get("company_name", "–ö–ª–∏–µ–Ω—Ç")

    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è lead_id={lead_id}...")

    prompt = f"""
    –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:
    {template.template_content}

    –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:
    {json.dumps(lead_data, ensure_ascii=False, indent=2)}

    –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞.
    """

    for attempt in range(3):
        try:
            response = await send_to_model(prompt)  # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
            break  # –£—Å–ø–µ—Ö
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è lead_id={lead_id}: {e}")
            if attempt == 2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è lead_id={lead_id}", exc_info=True)
                return None
            await asyncio.sleep(2)

    draft = {
        "wave_id": wave_id,
        "lead_id": lead_id,
        "email": email,
        "company_name": company_name,
        "subject": subject,
        "text": response.strip()
    }

    return draft


async def generate_drafts_for_wave(db, df, wave):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤–æ–ª–Ω—ã.
    """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id} (–∫–æ–ª-–≤–æ –ª–∏–¥–æ–≤: {len(df)})")

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
    template = TEST_TEMPLATE

    if not template:
        logger.error(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    email_subject = wave.subject
    batch_size = 50
    leads_batches = [df[i:i + batch_size] for i in range(0, len(df), batch_size)]

    for batch in leads_batches:
        tasks = []
        for _, lead in batch.iterrows():
            tasks.append(generate_draft_for_lead(template, lead, email_subject, wave.wave_id))

        results = await asyncio.gather(*tasks)

        successful_drafts = [res for res in results if res]

        # ‚úÖ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–º–µ—Å—Ç–æ Google Sheets
        print("\nüîπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏:")
        for draft in successful_drafts:
            print(json.dumps(draft, indent=4, ensure_ascii=False))

        # ‚úÖ –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # append_drafts_to_sheet(SHEET_ID, SHEET_NAME, successful_drafts)


async def run_test():
    async with SessionLocal() as db:
        await generate_drafts_for_wave(db, TEST_LEADS, TEST_WAVE)


if __name__ == "__main__":
    asyncio.run(run_test())