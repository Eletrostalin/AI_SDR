from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from agents.tempate_agent import async_template_generation_tool, async_invite_tool
from db.db import SessionLocal
from db.models import Templates, Waves, Company, CompanyInfo, ContentPlan, Campaigns, ChatThread
from states.states import TemplateStates
import logging

logger = logging.getLogger(__name__)
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_template
@router.message(Command("add_template"))
async def add_template(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.
    """
    db = SessionLocal()
    chat_id = str(message.chat.id)
    thread_id = message.message_thread_id  # –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        logger.info(f"üì® [User {message.from_user.id}] –ó–∞–ø—É—Å–∫ add_template, thread_id={thread_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id
        campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if not campaign:
            await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è thread_id={thread_id}")
            return

        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign.campaign_id} ({campaign.campaign_name})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–∞–º–ø–∞–Ω–∏–µ–π
        company = db.query(Company).filter_by(company_id=campaign.company_id).first()
        if not company:
            await message.reply("–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è campaign_id={campaign.campaign_id}")
            return

        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.company_id} ({company.name})")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è industry)
        company_info = db.query(CompanyInfo).filter_by(company_id=company.company_id).first()
        industry = company_info.industry if company_info else None

        if not industry:
            await message.reply("–û—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è company_id={company.company_id}")
            return

        logger.debug(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: {industry}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()

        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign.campaign_id}")
            return

        logger.debug(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(content_plans)} –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign.campaign_id}")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"select_content_plan:{content_plan.content_plan_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard.as_markup())

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `company_id` –≤ FSMContext (–µ–≥–æ –Ω–µ –±—ã–ª–æ!)
        await state.update_data(
            company_id=company.company_id,
            company_name=company.name,
            campaign_id=campaign.campaign_id,
            industry=industry
        )

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSMContext: company_id={company.company_id}, industry={industry}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("select_content_plan:"))
async def process_content_plan_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    db = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω
        content_plan = db.query(ContentPlan).filter_by(content_plan_id=content_plan_id).first()
        if not content_plan:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()

        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"select_wave:{wave.wave_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≤ FSM
        await state.update_data(content_plan_id=content_plan_id, content_plan_desc=content_plan.description)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("select_wave:"))
async def process_wave_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —à–∞–±–ª–æ–Ω—É —Å AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
    """
    wave_id = int(callback.data.split(":")[1])

    logger.debug(f"‚ö° –í—ã–±—Ä–∞–Ω–∞ –≤–æ–ª–Ω–∞ ID: {wave_id}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã

    db = SessionLocal()
    try:
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        await state.update_data(wave_id=wave_id, subject=wave.subject)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º wave_id –≤ FSMContext

        # üîπ **–ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è**
        try:
            invite_message = await async_invite_tool()
            if not invite_message:
                raise ValueError("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")

            await callback.message.reply(invite_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}", exc_info=True)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞.")  # fallback —Å–æ–æ–±—â–µ–Ω–∏–µ

        await state.set_state(TemplateStates.waiting_for_description)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ª–Ω—ã: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.message(StateFilter(TemplateStates.waiting_for_description))
async def handle_user_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).
    """
    user_input = message.text.strip()
    state_data = await state.get_data()

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–æ–ª–Ω—ã
    subject = state_data.get("subject")

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {user_input}")
    logger.debug(f"–¢–µ–º–∞ –ø–∏—Å—å–º–∞ (–∏–∑ –≤–æ–ª–Ω—ã): {subject}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    required_fields = ["company_name", "industry", "content_plan_desc", "subject"]
    missing_fields = [field for field in required_fields if field not in state_data]

    if missing_fields:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {missing_fields}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏
    await state.update_data(user_request=user_input)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ LangChain (–±–µ–∑ audience, goal, tone, region)
    try:
        template_response = await async_template_generation_tool({
            "company_name": state_data["company_name"],
            "industry": state_data["industry"],
            "content_plan": state_data["content_plan_desc"],
            "subject": subject,
            "user_request": user_input,
        })

        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_response}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(template_content=template_response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.reply(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:\n\n{template_response}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ? (–¥–∞/–Ω–µ—Ç)")
        await state.set_state(TemplateStates.waiting_for_confirmation)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(TemplateStates.waiting_for_confirmation)
async def confirm_template(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ, —Å–≤—è–∑–∞–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–æ–ª–Ω–æ–π.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    state_data = await state.get_data()
    db = SessionLocal()

    logger.info(f"‚úÖ [User {user_id}] –ù–∞—á–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...")

    try:
        if message.text.strip().lower() != "–¥–∞":
            await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logger.info(f"‚ùå [User {user_id}] –û—Ç–∫–ª–æ–Ω–∏–ª —à–∞–±–ª–æ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ FSMContext –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        required_fields = ["company_id", "subject", "template_content", "user_request", "wave_id"]
        missing_fields = [field for field in required_fields if field not in state_data]

        if missing_fields:
            logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ FSMContext: {missing_fields}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        company_id = state_data["company_id"]
        wave_id = state_data["wave_id"]

        logger.info(f"üîç [User {user_id}] company_id: {company_id}, wave_id: {wave_id}")

        # üîç –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ ChatThread –ø–æ chat_id
        chat_thread = db.query(ChatThread).filter_by(chat_id=chat_id).first()
        if not chat_thread:
            logger.error(f"‚ùå [User {user_id}] ChatThread –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chat_id: {chat_id}")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º —á–∞—Ç–æ–º.")
            return

        thread_id = chat_thread.thread_id
        logger.info(f"üìå [User {user_id}] –ù–∞–π–¥–µ–Ω thread_id: {thread_id}")

        # üîç –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id
        campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if not campaign:
            logger.error(f"‚ùå [User {user_id}] –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è thread_id: {thread_id}")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º —á–∞—Ç–æ–º.")
            return

        campaign_id = campaign.campaign_id
        logger.info(f"üì¢ [User {user_id}] –ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id}")

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–æ–ª–Ω–µ
        new_template = Templates(
            company_id=company_id,
            campaign_id=campaign_id,
            wave_id=wave_id,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–æ–ª–Ω–µ
            subject=state_data["subject"],
            template_content=state_data["template_content"],
            user_request=state_data["user_request"],
        )

        db.add(new_template)
        db.commit()
        logger.info(f"‚úÖ [User {user_id}] –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–º–∞: {state_data['subject']}, –í–æ–ª–Ω–∞: {wave_id}")

        await message.reply("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–æ–ª–Ω–µ!")
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        db.close()
