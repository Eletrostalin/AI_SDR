import json
from sqlalchemy.orm import Session
from sqlalchemy.sql import text

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.db import SessionLocal
from db.db_campaign import get_campaign_by_thread_id
from db.models import Waves, ContentPlan, Campaigns, EmailTable, Company
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("add_drafts"))
async def add_drafts(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é, –∫–æ–º–ø–∞–Ω–∏—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    thread_id = message.message_thread_id  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
    user_id = message.from_user.id
    db: Session = SessionLocal()

    logger.info(f"üì® [User {user_id}] –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /add_drafts –≤ —Ç–µ–º–µ {thread_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    campaign = get_campaign_by_thread_id(thread_id)
    if not campaign:
        await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º company_id –∏ —Å–ø–∏—Å–æ–∫ tables_name
    company_id, tables_names = get_company_tables_by_campaign(db, campaign)
    if not company_id or not tables_names:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(
        campaign_id=campaign.campaign_id,
        company_id=company_id,
        tables_names=tables_names
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"‚úÖ [User {user_id}] –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–º–ø–∞–Ω–∏—è {campaign.campaign_id} –∏ company_id {company_id}")

    # üìå **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω**
    db = SessionLocal()
    try:
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()
        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"select_content_plans:{content_plan.content_plan_id}"
            ))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


# üìå 2. –í—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
@router.callback_query(lambda c: c.data.startswith("select_content_plans:"))
async def select_content_plan(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üìå [User {user_id}] –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
        content_plan = db.query(ContentPlan).filter_by(content_plan_id=content_plan_id).first()
        if not content_plan:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()

        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"select_waves:{wave.wave_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:", reply_markup=keyboard.as_markup())

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"‚úÖ [User {user_id}] –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(waves)} –≤–æ–ª–Ω.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º content_plan_id –≤ FSM
        await state.update_data(content_plan_id=content_plan_id)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {content_plan_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("select_waves:"))
async def select_wave(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.
    """
    wave_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üìå [User {user_id}] –≤—ã–±—Ä–∞–ª –≤–æ–ª–Ω—É {wave_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–æ–ª–Ω—ã
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º wave_id –≤ FSM
        await state.update_data(wave_id=wave_id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        await process_email_table(callback.message, state, db)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_wave_selection: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


async def process_email_table(message: types.Message, state: FSMContext, db):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç email-—Ç–∞–±–ª–∏—Ü—É, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â—É—é –∫–æ–º–ø–∞–Ω–∏–∏, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é email'–æ–≤.
    """
    state_data = await state.get_data()
    company_id = state_data.get("company_id")

    try:
        email_table = db.query(EmailTable).filter_by(company_id=company_id).first()
        if not email_table:
            await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ email-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            return

        await state.update_data(email_table_id=email_table.email_table_id)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ email-—Ç–∞–±–ª–∏—Ü–∞ ID {email_table.email_table_id} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–º–ø–∞–Ω–∏–∏
        campaign = db.query(Campaigns).filter_by(campaign_id=state_data["campaign_id"]).first()
        if not campaign:
            await message.reply("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ email'–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        await filter_email_by_segments(campaign, email_table, db, message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_email_table: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ email-—Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def filter_email_by_segments(campaign: Campaigns, email_table: EmailTable, db: Session, message: types.Message):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç email-–∞–¥—Ä–µ—Å–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    user_id = message.from_user.id
    segments = campaign.segments

    if not segments:
        await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.")
        return

    try:
        segments = json.loads(segments) if isinstance(segments, str) else segments
    except json.JSONDecodeError:
        await message.reply("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.")
        return

    logger.debug(f"üìå –ó–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {segments}")

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ
    table_name = email_table.table_name
    if not table_name.isidentifier():
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email-—Ç–∞–±–ª–∏—Ü—ã.")
        return

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
    sql_query = text(f"SELECT email FROM {table_name} WHERE region = :region")

    try:
        email_records = db.execute(sql_query, {"region": segments["region"]}).fetchall()
        matching_emails = [record[0] for record in email_records]  # –ò–∑–≤–ª–µ–∫–∞–µ–º email-–∞–¥—Ä–µ—Å–∞

        count = len(matching_emails)
        logger.info(f"‚úÖ [User {user_id}] –ù–∞–π–¥–µ–Ω–æ {count} email-–∞–¥—Ä–µ—Å–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é.")
        await message.reply(f"–ù–∞–π–¥–µ–Ω–æ {count} email-–∞–¥—Ä–µ—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ email-–∞–¥—Ä–µ—Å–æ–≤: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ email-–∞–¥—Ä–µ—Å–æ–≤.")


def get_company_tables_by_campaign(db: Session, campaign: Campaigns):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü email'–æ–≤.
    """
    company = db.query(Company).filter_by(company_id=campaign.company_id).first()
    if not company:
        return None, []

    tables_names = [table.table_name for table in db.query(EmailTable).filter_by(company_id=company.company_id).all()]
    return company.company_id, tables_names
