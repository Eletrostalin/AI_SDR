import pandas as pd
from aiogram.filters import StateFilter
from aiogram import F
from sqlalchemy.orm import Session
import os
import logging

from db.db import SessionLocal
from db.db_company import get_company_by_chat_id
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

from handlers.campaign_handlers.campaign_handlers import handle_add_campaign
from states.states import EmailUploadState, EmailProcessingDecisionState
from utils.parser_email_table import save_cleaned_data, clean_dataframe, map_columns, clean_and_validate_emails
from utils.segment_utils import generate_segment_table_name

logger = logging.getLogger(__name__)
router = Router()

def get_first_question_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="load_more_files")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ask_campaign_question")]
        ]
    )

def get_second_question_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ –Ω–∞—á–∞–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="proceed_to_campaign")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="go_back_to_upload")]
        ]
    )


def get_email_choice_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å (—Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏)", callback_data="split_emails")],
            [InlineKeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å (–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª)", callback_data="upload_new_file")]
        ]
    )


@router.message()
async def handle_email_table_request(message: Message, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email-—Ç–∞–±–ª–∏—Ü—ã.
    """
    logger.info("–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã email. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")

    try:
        chat_id = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º company_id
        with SessionLocal() as db:
            company = get_company_by_chat_id(db, str(chat_id))
            if not company:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω company_id –¥–ª—è chat_id={chat_id}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤–∞—à–∏–º —á–∞—Ç–æ–º.")
                return

            company_id = company.company_id  # company.id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
            logger.debug(f"üîπ –ù–∞–π–¥–µ–Ω company_id={company_id} –¥–ª—è chat_id={chat_id}")

        segment_table_name = generate_segment_table_name(chat_id)
        if segment_table_name is None:
            logger.error("‚ùå –û—à–∏–±–∫–∞: segment_table_name –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return

        logger.debug(f"üìå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: {segment_table_name}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(segment_table_name=segment_table_name)
        await state.set_state(EmailUploadState.waiting_for_file_upload)

        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {await state.get_data()}")

        await message.reply(
            f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –º–Ω–µ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –∞–¥—Ä–µ—Å–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª üìÇ —Å –µ–º–µ–π–ª–∞–º–∏ –≤ "
            f"—Ñ–æ—Ä–º–∞—Ç–µ XLSX"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(StateFilter(EmailUploadState.waiting_for_file_upload))
async def handle_file_upload(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å email-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await message.reply(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    if not message.document:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞.")
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx, .xls).")
        return

    document = message.document
    file_path = os.path.join("uploads", document.file_name)

    try:
        allowed_extensions = (".xlsx", ".xls")
        if not document.file_name.lower().endswith(allowed_extensions):
            await message.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel (.xlsx, .xls).")
            return

        bot = message.bot

        os.makedirs("uploads", exist_ok=True)
        logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'uploads' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        await bot.download(document.file_id, destination=file_path)
        logger.info(f"üìÇ –§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {file_path}.")

        # üîπ **–°–æ—Ö—Ä–∞–Ω—è–µ–º `file_name` –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM**
        await state.update_data(file_name=document.file_name)

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ª–∏ file_name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        state_data = await state.get_data()
        if not state_data.get("file_name"):
            logger.error("‚ùå –û—à–∏–±–∫–∞: file_name –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ FSMContext!")
        else:
            logger.debug(f"‚úÖ file_name —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {state_data.get('file_name')}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        state_data = await state.get_data()
        segment_table_name = state_data.get("segment_table_name")

        if segment_table_name is None:
            chat_id = message.chat.id

            with SessionLocal() as db:
                company = get_company_by_chat_id(db, str(chat_id))
                if not company:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω company_id –¥–ª—è chat_id={chat_id}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤–∞—à–∏–º —á–∞—Ç–æ–º.")
                    return

                company_id = company.company_id
                segment_table_name = generate_segment_table_name(company_id)
                logger.debug(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã: {segment_table_name}")

            await state.update_data(segment_table_name=segment_table_name)

        logger.debug(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: {segment_table_name}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        is_processed = await process_email_table(file_path, segment_table_name, message, state)

        if is_processed:
            await message.reply(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
            await ask_about_more_files(message, state)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}: {e}", exc_info=True)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóë –§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω.")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


async def process_email_table(file_path: str, segment_table_name: str, message: Message, state: FSMContext) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É Excel, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫, –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É.
    """
    try:
        df = pd.read_excel(file_path)
        logger.debug(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):\n{df.head()}")

        if df.empty:
            await message.reply("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return False

        df = clean_dataframe(df)
        logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):\n{df.head()}")

        if df.empty:
            await message.reply("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return False

        user_columns = df.columns.tolist()
        logger.debug(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –º–∞–ø–ø–∏–Ω–≥–æ–º: {user_columns}")

        mapping = await map_columns(user_columns)
        logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫: {mapping}")

        if not mapping:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")
            return False

        df.rename(columns=mapping, inplace=True)
        logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):\n{df.head()}")

        state_data = await state.get_data()
        file_name = state_data.get("file_name")

        if not file_name:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞.")
            return False

        df["file_name"] = file_name  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        logger.debug(f"üìå –î–æ–±–∞–≤–ª–µ–Ω file_name –≤ DataFrame: {file_name}")

        # üîπ –§–∏–ª—å—Ç—Ä—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ email —Å–æ–¥–µ—Ä–∂–∏—Ç "@"
        if "email" in df.columns:
            total_rows = len(df)
            logger.debug(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π email: {total_rows}")

            df = df[df["email"].astype(str).str.contains("@", na=False)]
            filtered_out_rows = total_rows - len(df)

            if filtered_out_rows > 0:
                logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ {filtered_out_rows} —Å—Ç—Ä–æ–∫ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email.")

            if df.empty:
                await message.reply("‚ùå –í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤.")
                return False

        df, valid_emails, multi_email_rows, problematic_rows, problematic_values = clean_and_validate_emails(df)
        logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):\n{df.head()}")

        if valid_emails is None:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ email.")
            return False

        logger.info(f"üì• –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É {segment_table_name}")

        save_result = await save_cleaned_data(df, segment_table_name, message, state)
        if save_result:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {segment_table_name}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {segment_table_name}")

        return save_result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        return False


@router.callback_query(StateFilter(EmailUploadState.duplicate_email_check))
async def handle_email_choice_callback(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–∞–∑–¥–µ–ª–∏—Ç—å email-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    current_state = await state.get_state()
    logger.debug(f"üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–ª–±—ç–∫–∞: {current_state}")
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {call.data}")

    choice = call.data
    data = await state.get_data()
    df = data.get("processing_df")
    email_column = data.get("email_column")
    segment_table_name = data.get("segment_table_name")

    if choice == "split_emails":
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email.")
        df = df.assign(**{email_column: df[email_column].str.split(r"[;, ]")}).explode(email_column)
        df[email_column] = df[email_column].str.strip()

        await call.message.edit_text("‚úÖ –ó–∞–ø–∏—Å–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ **–æ–¥–∏–Ω** email.")

        await save_cleaned_data(df, segment_table_name, call.message, state)
        await ask_about_more_files(call.message, state)

    elif choice == "upload_new_file":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        await state.set_state(EmailUploadState.waiting_for_file_upload)
        await call.message.edit_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")

    else:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)


async def ask_about_more_files(message: Message, state: FSMContext):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª.
    """
    logger.debug(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {EmailProcessingDecisionState.waiting_for_more_files_decision}")
    await state.set_state(EmailProcessingDecisionState.waiting_for_more_files_decision)

    current_state = await state.get_state()
    logger.debug(f"‚úÖ –ü–æ—Å–ª–µ –ø–∞—É–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    await message.reply(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –±–∞–∑–æ–π email?",
        reply_markup=get_first_question_keyboard()
    )

        
@router.callback_query(F.data.in_(["load_more_files", "ask_campaign_question"]), StateFilter(EmailProcessingDecisionState.waiting_for_more_files_decision))
async def handle_first_question_decision(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å:
    - "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª?" -> –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞.
    - "–ù–µ—Ç" -> –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –∫–∞–º–ø–∞–Ω–∏—é.
    """
    current_state = await state.get_state()
    logger.debug(f"üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–ª–±—ç–∫–∞: {current_state}")
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {call.data}")

    if call.data == "load_more_files":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        await state.set_state(EmailUploadState.waiting_for_file_upload)
        logger.debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
        await call.message.edit_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å email-–±–∞–∑–æ–π.")

    elif call.data == "ask_campaign_question":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–∞–º–ø–∞–Ω–∏—é.")
        await state.set_state(EmailProcessingDecisionState.waiting_for_campaign_decision)
        logger.debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
        await call.message.edit_text(
            "–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏?",
            reply_markup=get_second_question_keyboard()
        )


@router.callback_query(F.data.in_(["proceed_to_campaign", "go_back_to_upload"]), StateFilter(EmailProcessingDecisionState.waiting_for_campaign_decision))
async def handle_second_question_decision(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –æ–ø—Ä–æ—Å:
    - "–ì–æ—Ç–æ–≤ –∫ –∫–∞–º–ø–∞–Ω–∏–∏" -> –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.
    - "–ù–µ—Ç" -> –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ + —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    current_state = await state.get_state()
    logger.debug(f"üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–ª–±—ç–∫–∞: {current_state}")
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {call.data}")

    if call.data == "proceed_to_campaign":
        logger.info("üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.")
        await state.clear()
        await handle_add_campaign(call.message, state)

    elif call.data == "go_back_to_upload":
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ
        await state.clear()
        await call.message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.")


async def handle_campaign_decision(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤.
    """
    logger.debug(f"üìå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–º–ø–∞–Ω–∏–∏: {await state.get_state()}")
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {call.data}")

    if call.data == "proceed_to_campaign":
        logger.info("üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏.")
        await state.clear()
        await call.message.edit_text("üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é.")

    elif call.data == "go_back_to_upload":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤.")
        await state.set_state(EmailUploadState.waiting_for_file_upload)
        await call.message.edit_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å email-–±–∞–∑–æ–π.")

    else:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!!!.", show_alert=True)


