from datetime import timedelta, datetime

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.exc import SQLAlchemyError

from agents.tempate_agent import async_invite_tool
from db.db import SessionLocal
from db.models import Templates, Waves, Company, CompanyInfo, ContentPlan, Campaigns, ChatThread
from promts.template_promt import generate_email_prompt
from states.states import TemplateStates
import logging

from utils.utils import send_to_model

logger = logging.getLogger(__name__)
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_template
@router.message(Command("add_template"))
async def add_template(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.
    """
    db = SessionLocal()
    chat_id = str(message.chat.id)
    thread_id = message.message_thread_id

    try:
        logger.info(f"[User {message.from_user.id}] –ó–∞–ø—É—Å–∫ add_template, thread_id={thread_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id
        campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if not campaign:
            await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è thread_id={thread_id}")
            return

        logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign.campaign_id} ({campaign.campaign_name})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–∞–º–ø–∞–Ω–∏–µ–π
        company = db.query(Company).filter_by(company_id=campaign.company_id).first()
        if not company:
            await message.reply("–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è campaign_id={campaign.campaign_id}")
            return

        logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.company_id} ({company.name})")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company_info = db.query(CompanyInfo).filter_by(company_id=company.company_id).first()
        business_sector = company_info.business_sector if company_info else None

        # if not business_sector:
        #     await message.reply("–û—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        #     logger.warning(f"–û—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ (business_sector) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è company_id={company.company_id}")
        #     return
        #
        # logger.debug(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: {business_sector}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()
        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
            logger.warning(f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign.campaign_id}")
            return

        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(content_plans)} –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è campaign_id={campaign.campaign_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
        await state.update_data(
            company_id=company.company_id,
            company_name=company.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            campaign_id=campaign.campaign_id,
            business_sector=business_sector
        )

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSMContext: company_id={company.company_id}, business_sector={business_sector}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"select_content_plan:{content_plan.content_plan_id}"
            ))

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("select_content_plan:"))
async def process_content_plan_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    db = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω
        content_plan = db.query(ContentPlan).filter_by(content_plan_id=content_plan_id).first()
        if not content_plan:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()
        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≤ FSM
        await state.update_data(content_plan_id=content_plan.content_plan_id, content_plan_desc=content_plan.description)

        logger.debug(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FSMContext: {content_plan.content_plan_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"select_wave:{wave.wave_id}"
            ))

        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("select_wave:"))
async def process_wave_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —à–∞–±–ª–æ–Ω—É —Å AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
    """
    wave_id = int(callback.data.split(":")[1])

    logger.debug(f"‚ö° –í—ã–±—Ä–∞–Ω–∞ –≤–æ–ª–Ω–∞ ID: {wave_id}")

    db = SessionLocal()
    try:
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–æ–ª–Ω—ã –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        today = datetime.now().date()
        wave_date = wave.send_date.date()
        if wave_date < today + timedelta(days=1):
            await callback.message.reply(
                "‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.\n"
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏."
            )
            return  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        await state.update_data(wave_id=wave_id)  # –£–±—Ä–∞–ª–∏ subject, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

        # üîπ **–ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è**
        try:
            invite_message = await async_invite_tool()
            if not invite_message:
                raise ValueError("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")

            await callback.message.reply(invite_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}", exc_info=True)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞.")  # fallback —Å–æ–æ–±—â–µ–Ω–∏–µ

        await state.set_state(TemplateStates.waiting_for_description)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ª–Ω—ã: {e}", exc_info=True)
        await callback.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


async def handle_user_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞.
    """
    user_input = message.text.strip()
    chat_id = str(message.chat.id)
    db = SessionLocal()

    try:
        state_data = await state.get_data()
        company_id = state_data.get("company_id")
        content_plan_id = state_data.get("content_plan_id")

        if not company_id:
            company = db.query(Company).filter_by(chat_id=chat_id).first()
            if company:
                company_id = company.company_id
                await state.update_data(company_id=company_id)
            else:
                await message.reply("–û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

        if not content_plan_id:
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        company_data = (
            db.query(CompanyInfo, ContentPlan.description)
            .join(ContentPlan, CompanyInfo.company_id == ContentPlan.company_id)
            .filter(CompanyInfo.company_id == company_id, ContentPlan.content_plan_id == content_plan_id)
            .first()
        )

        if not company_data:
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.")
            return

        company_info, content_plan_desc = company_data

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        company_details = {
            "company_name": company_info.company_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            "company_mission": company_info.company_mission,
            "company_values": company_info.company_values,
            "business_sector": company_info.business_sector,
            "office_addresses_and_hours": company_info.office_addresses_and_hours,
            "resource_links": company_info.resource_links,
            "target_audience_b2b_b2c_niche_geography": company_info.target_audience_b2b_b2c_niche_geography,
            "unique_selling_proposition": company_info.unique_selling_proposition,
            "customer_pain_points": company_info.customer_pain_points,
            "competitor_differences": company_info.competitor_differences,
            "promoted_products_and_services": company_info.promoted_products_and_services,
            "delivery_availability_geographical_coverage": company_info.delivery_availability_geographical_coverage,
            "frequently_asked_questions_with_answers": company_info.frequently_asked_questions_with_answers,
            "common_customer_objections_and_responses": company_info.common_customer_objections_and_responses,
            "successful_case_studies": company_info.successful_case_studies,
            "additional_information": company_info.additional_information,
            "content_plan_description": content_plan_desc,
            "user_request": user_input,  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        company_details = {k: v for k, v in company_details.items() if v}  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = generate_email_prompt(company_details)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å
        template_response = send_to_model(prompt)

        if not template_response:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await state.update_data(template_content=template_response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        await message.reply(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:\n\n{template_response}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ? (–¥–∞/–Ω–µ—Ç)")
        await state.set_state(TemplateStates.waiting_for_confirmation)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        db.close()


@router.message(TemplateStates.waiting_for_confirmation)
async def confirm_template(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    state_data = await state.get_data()
    db = SessionLocal()

    logger.info(f"‚úÖ [User {user_id}] –ù–∞—á–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...")

    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —à–∞–±–ª–æ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç
        if message.text.strip().lower() != "–¥–∞":
            await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
            logger.info(f"‚ùå [User {user_id}] –û—Ç–∫–ª–æ–Ω–∏–ª —à–∞–±–ª–æ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ user_request
            await state.set_state(TemplateStates.waiting_for_description)
            return

        # **–õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ**
        logger.debug(f"üìå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ FSM –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π: {state_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        required_fields = ["company_id", "template_content", "user_request", "wave_id"]
        missing_fields = [field for field in required_fields if field not in state_data]

        if missing_fields:
            logger.warning(f"‚ö†Ô∏è [User {user_id}] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_fields}")

            # **–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å user_request**
            if "user_request" in missing_fields:
                last_message = await state.get_state()
                if last_message:
                    await state.update_data(user_request=last_message)
                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω user_request: {last_message}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            state_data = await state.get_data()
            missing_fields = [field for field in required_fields if field not in state_data]
            if missing_fields:
                logger.error(f"‚ùå [User {user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {missing_fields}")
                await message.reply("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        company_id = state_data["company_id"]
        wave_id = state_data["wave_id"]
        template_content = state_data["template_content"]
        user_request = state_data["user_request"]

        # **–ü–æ–ª—É—á–∞–µ–º subject –∏–∑ waves**
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave:
            logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ª–Ω—É —Å wave_id={wave_id}")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ª–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        subject = wave.subject  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subject –∏–∑ waves

        # **–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏**
        chat_thread = db.query(ChatThread).filter_by(chat_id=chat_id).first()
        if not chat_thread:
            logger.error(f"‚ùå [User {user_id}] ChatThread –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chat_id: {chat_id}")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–ø–∞–Ω–∏—é.")
            return

        campaign = db.query(Campaigns).filter_by(thread_id=chat_thread.thread_id).first()
        if not campaign:
            logger.error(f"‚ùå [User {user_id}] –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è thread_id: {chat_thread.thread_id}")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–ø–∞–Ω–∏—é.")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω
        new_template = Templates(
            company_id=company_id,
            campaign_id=campaign.campaign_id,
            wave_id=wave_id,
            template_content=template_content,
            user_request=user_request,
            subject=subject,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subject –∏–∑ wave
        )

        db.add(new_template)
        db.commit()
        logger.info(f"‚úÖ [User {user_id}] –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! Subject: {subject}, –í–æ–ª–Ω–∞: {wave_id}")

        await message.reply("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–æ–ª–Ω–µ!")
        await state.clear()

    except SQLAlchemyError as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        db.close()
