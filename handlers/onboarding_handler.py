from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
import pandas as pd
import io

from db.db import SessionLocal
from db.models import CompanyInfo, User, EmailConnections
from handlers.email_table_handler import handle_email_table_request
from states.states import OnboardingState

import logging

logger = logging.getLogger(__name__)
router = Router()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –º–∞–ø–∏–Ω–≥–∞
COLUMN_MAPPING = {
    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": "company_name",
    "–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏": "company_mission",
    "–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏": "company_values",
    "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "business_sector",
    "–ê–¥—Ä–µ—Å–∞ –æ—Ñ–∏—Å–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã": "office_addresses_and_hours",
    "–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã": "resource_links",
    "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (B2B/B2C, –Ω–∏—à–∞, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è)": "target_audience_b2b_b2c_niche_geography",
    "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–£–¢–ü)": "unique_selling_proposition",
    "–ë–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤": "customer_pain_points",
    "–û—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤": "competitor_differences",
    "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å": "promoted_products_and_services",
    "–ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏/–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç": "delivery_availability_geographical_coverage",
    "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ) —Å –æ—Ç–≤–µ—Ç–∞–º–∏": "frequently_asked_questions_with_answers",
    "–¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö": "common_customer_objections_and_responses",
    "–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤": "successful_case_studies",
    "–ü—Ä–æ—á–µ–µ": "additional_information",
    "–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è?! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ": "missing_field_feedback",
}


@router.callback_query(lambda c: c.data in ["skip_missing_fields", "fill_missing_fields"], OnboardingState.missing_fields)
async def handle_missing_fields_callback(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å".
    """
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    if call.data == "skip_missing_fields":
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è.")
        await state.update_data(missing_fields=[])
        await state.set_state(OnboardingState.confirmation)
        await confirm_brief(call.message, state)

    elif call.data == "fill_missing_fields":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        await state.set_state(OnboardingState.waiting_for_brief)
        await call.message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")


@router.message(OnboardingState.waiting_for_brief)
async def handle_brief_upload(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ —Å –±—Ä–∏—Ñ–æ–º.
    """
    current_state = await state.get_state()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∏—Ñ–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    await message.answer("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        return

    if not message.document.file_name.endswith(".xlsx"):
        await message.answer("–û—à–∏–±–∫–∞! –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        return

        # –î–æ—Å—Ç–∞–µ–º `company_id` –ø–æ `telegram_id` –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    db: Session = SessionLocal()
    user = db.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
    db.close()

    if not user or not user.company_id:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω company_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å.")
        return

    company_id = user.company_id  # ‚úÖ –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π company_id

    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)
    file_stream = await message.bot.download_file(file.file_path)

    try:
        df = pd.read_excel(io.BytesIO(file_stream.read()), header=None)
        df.iloc[:2] = df.iloc[:2].ffill(axis=1)
        company_name = str(df.iloc[1, 1]).strip()

        if not company_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        brief_data = {"company_name": company_name}
        original_headers = [
            str(df.iloc[i, 0]).strip() for i in range(2, len(df)) if pd.notna(df.iloc[i, 0])
        ]

        for i in range(2, len(df)):
            key = str(df.iloc[i, 0]).strip()
            value = str(df.iloc[i, 2]).strip() if pd.notna(df.iloc[i, 2]) else None
            if key and value:
                brief_data[key] = value

        logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –º–∞–ø–ø–∏–Ω–≥–æ–º: {brief_data}")

        renamed_data = {COLUMN_MAPPING.get(k, k): v for k, v in brief_data.items()}
        data = await state.get_data()
        old_missing_fields = set(data.get("missing_fields", []))
        new_missing_fields = {k for k in original_headers if k not in brief_data and k.lower() != "nan"}

        if new_missing_fields:
            logger.warning(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {new_missing_fields}")

            await state.update_data(brief_data=renamed_data, missing_fields=list(new_missing_fields))
            await state.set_state(OnboardingState.missing_fields)

            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup –≤–º–µ—Å—Ç–æ ReplyKeyboardMarkup
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_missing_fields")],
                    [InlineKeyboardButton(text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data="fill_missing_fields")]
                ]
            )

            await message.answer(
                f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n{', '.join(new_missing_fields)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            return

        await state.update_data(company_id=company_id, brief_data=renamed_data, missing_fields=[])
        await state.set_state(OnboardingState.processing_brief)
        await process_brief(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def process_brief(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±—Ä–∏—Ñ–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        data = await state.get_data()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {data}")

        company_id = data.get("company_id")
        brief_data = data.get("brief_data", {})

        if not company_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω company_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(OnboardingState.waiting_for_brief)
            return

        if not brief_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –±—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(OnboardingState.waiting_for_brief)
            return

        missing_fields = data.get("missing_fields", [])

        if missing_fields:
            logger.warning(f"–í —Ñ–∞–π–ª–µ –≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {missing_fields}")
            await message.answer(
                f"‚ö†Ô∏è –í—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_fields)}\n\n"
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚Äô, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∏—Ö."
            )
            await state.set_state(OnboardingState.missing_fields)
            return

        logger.info(f"–ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞: {brief_data}")
        brief_data = {str(k): v for k, v in brief_data.items()}

        company_name = brief_data.get("company_name", "").strip()
        if not company_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(OnboardingState.waiting_for_brief)
            return

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î: {brief_data}")
        allowed_keys = set(COLUMN_MAPPING.values())
        filtered_data = {k: v for k, v in brief_data.items() if k in allowed_keys}
        removed_keys = set(brief_data.keys()) - set(filtered_data.keys())
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏: {removed_keys}")

        db: Session = SessionLocal()
        existing_info = db.query(CompanyInfo).filter_by(company_id=company_id).first()

        if existing_info:
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}")
            for key, value in filtered_data.items():
                setattr(existing_info, key, value)
            existing_info.updated_at = datetime.utcnow()
        else:
            logger.info(f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}")
            filtered_data["company_id"] = company_id
            filtered_data["created_at"] = datetime.utcnow()
            filtered_data["updated_at"] = datetime.utcnow()
            new_info = CompanyInfo(**filtered_data)
            db.add(new_info)

        db.commit()
        db.close()

        logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –±—Ä–∏—Ñ: {filtered_data}")
        await state.set_state(OnboardingState.confirmation)
        await confirm_brief(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∏—Ñ–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def confirm_brief(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø.
    """
    await message.answer(
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–æ–≥—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏."
    )
    await state.set_state(OnboardingState.waiting_for_email_connections)
    await message.answer(
        "üìß –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è email-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏ IMAP.",
    )



@router.message(OnboardingState.missing_fields)
async def handle_missing_fields_response(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö.
    """
    response = message.text.strip().lower()

    if response == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.")

        # –û—á–∏—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.update_data(missing_fields=[])
        await state.set_state(OnboardingState.confirmation)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await confirm_brief(message, state)

    elif response == "–∑–∞–ø–æ–ª–Ω–∏—Ç—å":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è. –ñ–¥—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

        await state.set_state(OnboardingState.waiting_for_brief)
        await message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ **'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'** –∏–ª–∏ **'–ó–∞–ø–æ–ª–Ω–∏—Ç—å'**.")


@router.message(OnboardingState.waiting_for_email_connections)
async def handle_email_connections_upload(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å email-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
    """
    if not message.document:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        return

    if not message.document.file_name.endswith(".xlsx"):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        return

    db: Session = SessionLocal()
    user = db.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
    db.close()

    if not user or not user.company_id:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω company_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å.")
        return

    company_id = user.company_id

    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)
    file_stream = await message.bot.download_file(file.file_path)

    try:
        df = pd.read_excel(io.BytesIO(file_stream.read()), header=None)


        if df.empty:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return

        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        email_connections = parse_email_accounts(df)

        if not email_connections:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.")
            return

        logger.info(f"üìß –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ email-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {email_connections}")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db = SessionLocal()
        new_connection = EmailConnections(
            chat_id=message.chat.id,
            company_id=company_id,
            connection_data=email_connections
        )
        db.add(new_connection)
        db.commit()
        db.close()

        logger.info(f"‚úÖ Email-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}")

        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        await state.clear()
        await handle_email_table_request(message, state)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def parse_email_accounts(df: pd.DataFrame) -> dict:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç DataFrame —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—á—Ç—ã –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    email_accounts = {}

    current_email = None
    for i in range(len(df)):
        row = df.iloc[i, :].dropna().tolist()
        if not row:
            continue

        first_cell = str(row[0]).strip().lower()

        if "–ø–æ—á—Ç–∞" in first_cell:  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ—á—Ç—ã
            current_email = f"email_{len(email_accounts) + 1}"
            email_accounts[current_email] = {}
        elif current_email:
            if "–ª–æ–≥–∏–Ω" in first_cell:
                email_accounts[current_email]["login"] = row[1] if len(row) > 1 else None
            elif "–ø—Ä–æ–ª—å" in first_cell:
                email_accounts[current_email]["password"] = row[1] if len(row) > 1 else None
            elif "smtp-—Å–µ—Ä–≤–µ—Ä" in first_cell:
                email_accounts[current_email]["smtp_server"] = row[1] if len(row) > 1 else None
            elif "–ø–æ—Ä—Ç smtp" in first_cell:
                email_accounts[current_email]["smtp_port"] = int(row[1]) if len(row) > 1 else None
            elif "imap-—Å–µ—Ä–≤–µ—Ä" in first_cell:
                email_accounts[current_email]["imap_server"] = row[1] if len(row) > 1 else None
            elif "–ø–æ—Ä—Ç imap" in first_cell:
                email_accounts[current_email]["imap_port"] = int(row[1]) if len(row) > 1 else None

    return email_accounts