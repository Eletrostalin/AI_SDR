import json
from aiogram.filters import StateFilter
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.sql import text
from datetime import datetime
from db.db import SessionLocal
from db.db_content_plan import create_content_plan, add_wave
from states.states import AddContentPlanState
from logger import logger
from utils.utils import send_to_model  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –º–æ–¥–µ–ª—å

router = Router()


@router.message(StateFilter(None))
async def handle_add_content_plan(message: Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.
    """
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ —Å–ª–æ–≤–∞.")
    await state.set_state(AddContentPlanState.waiting_for_restricted_topics)


@router.message(StateFilter(AddContentPlanState.waiting_for_restricted_topics))
async def process_restricted_topics(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ —Å–ª–æ–≤–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è.
    """
    restricted_topics = message.text.strip()
    await state.update_data(restricted_topics=restricted_topics)

    await message.answer("–û–ø–∏—à–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.\n\n"
                         "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
                         "**–ê—É–¥–∏—Ç–æ—Ä–∏—è:**\n"
                         "1Ô∏è‚É£ –•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã\n"
                         "2Ô∏è‚É£ –¢—ë–ø–ª—ã–µ –ª–∏–¥—ã\n"
                         "3Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç—ã\n"
                         "4Ô∏è‚É£ –°–º–µ—à–∞–Ω–Ω–∞—è\n\n"
                         "**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**\n"
                         "1Ô∏è‚É£ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π\n"
                         "2Ô∏è‚É£ –î—Ä—É–∂–µ–ª—é–±–Ω–æ-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π\n"
                         "3Ô∏è‚É£ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π\n"
                         "4Ô∏è‚É£ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π\n"
                         "5Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 4') –∏–ª–∏ —Ç–µ–∫—Å—Ç.")

    await state.set_state(AddContentPlanState.waiting_for_audience_style)


@router.message(StateFilter(AddContentPlanState.waiting_for_audience_style))
async def process_audience_style(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    user_input = message.text.strip()
    logger.debug(f"üì© –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}")

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**
    - –•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã
    - –¢—ë–ø–ª—ã–µ –ª–∏–¥—ã
    - –ö–ª–∏–µ–Ω—Ç—ã
    - –°–º–µ—à–∞–Ω–Ω–∞—è

    **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è:**
    - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
    - –î—Ä—É–∂–µ–ª—é–±–Ω–æ-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    - –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å
    - –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å

    **–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** "{user_input}"

    **–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ:**
    {{
        "audience": "<–∞—É–¥–∏—Ç–æ—Ä–∏—è>",
        "style": "<—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è>"
    }}
    """

    logger.debug(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å —Å prompt: {prompt}")

    response = send_to_model(prompt)

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        logger.debug(f"üì¨ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response}")

        model_data = json.loads(response)
        audience = model_data.get("audience", "").strip()
        style = model_data.get("style", "").strip()

        if not audience or not style:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥.")
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å—Ç–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        logger.info(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –º–æ–¥–µ–ª—å—é: –ê—É–¥–∏—Ç–æ—Ä–∏—è - {audience}, –°—Ç–∏–ª—å - {style}")

        await state.update_data(audience=audience, style=style)
        await state.update_data(wave_count=1)  # –í—Å–µ–≥–¥–∞ 1 –≤–æ–ª–Ω–∞

        await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(AddContentPlanState.waiting_for_send_date)

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–æ–¥–µ–ª–∏: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(AddContentPlanState.waiting_for_send_date))
async def process_send_date(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î.
    """
    user_input = message.text.strip()

    try:
        send_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        await state.update_data(send_date=send_date.isoformat())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    campaign_data = state_data.get("campaign_data", {})
    company_id = campaign_data.get("company_id")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    campaign_id = campaign_data.get("campaign_id")  # –ö–∞–º–ø–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è
    telegram_id = message.from_user.id
    restricted_topics = state_data.get("restricted_topics", "")
    audience = state_data.get("audience", "")
    style = state_data.get("style", "")
    wave_count = state_data.get("wave_count", 1)
    send_date = state_data.get("send_date")

    if not company_id or not campaign_id:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: company_id –∏–ª–∏ campaign_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–∞–Ω–Ω—ã–µ: {state_data}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
    description = {
        "audience": audience,
        "style": style,
        "restricted_topics": restricted_topics,
        "send_date": send_date
    }

    try:
        with SessionLocal() as db:
            # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
            content_plan = create_content_plan(
                db=db,
                company_id=company_id,  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                chat_id=telegram_id,
                description=description,
                wave_count=wave_count
            )

            if not content_plan:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.")

            # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω—ã
            wave = add_wave(
                db=db,
                content_plan_id=content_plan.content_plan_id,
                company_id=company_id,
                campaign_id=campaign_id,
                send_date=send_date,
                subject="–ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞"
            )

            if not wave:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ª–Ω—É.")

        await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")