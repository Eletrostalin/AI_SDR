from aiogram import Router
from aiogram.types import Message, ChatMemberUpdated, ContentType
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from admin.ThreadManager import save_thread_to_db
from classifier import classify_message
from db.db import SessionLocal
from db.db_auth import create_or_get_company_and_user
from db.models import Company
from dispatcher import dispatch_classification
from handlers.company_handlers import process_edit_company_information, confirm_edit_company_information
from handlers.onboarding_handler import handle_company_name, handle_industry, handle_region, handle_contact_email, \
    handle_contact_phone, handle_additional_details, handle_confirmation
from utils.states import OnboardingState, BaseState, EditCompanyState
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.chat_member()
async def greet_new_user(event: ChatMemberUpdated, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç.
    """
    if event.new_chat_member.status == "member" and event.old_chat_member.status in {"left", "kicked"}:
        telegram_user = event.new_chat_member.user
        chat_id = event.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —á–∞—Ç —Ç–µ–º—ã
        chat = await event.bot.get_chat(chat_id)
        logger.debug(f"–ß–∞—Ç {chat_id} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã: {chat.is_forum}")

        if not chat.is_forum:
            logger.error(f"–¢–µ–º—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —á–∞—Ç–µ {chat_id}. –ü–æ–ª–µ message_thread_id –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ.")
            return

        logger.debug(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        db: Session = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            existing_company = db.query(Company).filter_by(chat_id=str(chat_id)).first()
            logger.debug(f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {existing_company}")

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = create_or_get_company_and_user(db, telegram_user, chat_id)

            if not existing_company:
                await state.update_data(company_id=user.company_id)
                await state.set_state(OnboardingState.waiting_for_company_name)
                sent_message = await event.bot.send_message(
                    chat_id=chat_id,
                    text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
                )
                logger.debug(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {sent_message.message_id}, thread_id: {sent_message.message_thread_id}")

                if sent_message.message_thread_id:
                    save_thread_to_db(
                        db=db,
                        chat_id=chat_id,
                        thread_id=sent_message.message_thread_id,
                        thread_name="Onboarding",
                        created_by_bot=True
                    )
            else:
                sent_message = await event.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegram_user.full_name}!\n"
                        "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å."
                    )
                )
                logger.debug(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {sent_message.message_id}, thread_id: {sent_message.message_thread_id}")

                if sent_message.message_thread_id:
                    save_thread_to_db(
                        db=db,
                        chat_id=chat_id,
                        thread_id=sent_message.message_thread_id,
                        thread_name="General",
                        created_by_bot=False
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        finally:
            db.close()

@router.message()
async def handle_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    current_state = await state.get_state()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type in {ContentType.NEW_CHAT_MEMBERS, ContentType.LEFT_CHAT_MEMBER}:
        if message.content_type == ContentType.NEW_CHAT_MEMBERS:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for new_member in message.new_chat_members:
                event = ChatMemberUpdated(
                    chat=message.chat,
                    from_user=message.from_user,
                    new_chat_member=new_member,
                    old_chat_member=message.from_user,
                )
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_member.full_name}")
                await greet_new_user(event, state)
        logger.debug("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state is None:
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await state.set_state(BaseState.default.state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            classification = classify_message(message.text)  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {classification}")
            await dispatch_classification(classification, message, state)  # –ü–µ—Ä–µ–¥–∞—á–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    if current_state == EditCompanyState.waiting_for_updated_info.state:
        await process_edit_company_information(message, state)
        return
    elif current_state == EditCompanyState.waiting_for_confirmation.state:
        await confirm_edit_company_information(message, state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    if current_state == OnboardingState.waiting_for_company_name.state:
        await handle_company_name(message, state)
    elif current_state == OnboardingState.waiting_for_industry.state:
        await handle_industry(message, state)
    elif current_state == OnboardingState.waiting_for_region.state:
        await handle_region(message, state)
    elif current_state == OnboardingState.waiting_for_contact_email.state:
        await handle_contact_email(message, state)
    elif current_state == OnboardingState.waiting_for_contact_phone.state:
        await handle_contact_phone(message, state)
    elif current_state == OnboardingState.waiting_for_additional_details.state:
        await handle_additional_details(message, state)
    elif current_state == OnboardingState.confirmation.state:
        await handle_confirmation(message, state)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")