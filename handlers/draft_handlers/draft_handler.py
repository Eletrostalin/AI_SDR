import asyncio
import json
from sqlalchemy.orm import Session

from db.models import Templates
from logger import logger
from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model

# üîπ ID Google –¢–∞–±–ª–∏—Ü—ã (–≤–æ–∑—å–º–∏ –∏–∑ —Å—Å—ã–ª–∫–∏)
SHEET_ID = "1YXv8CcjB_iOhDKAJZMkUV7BAmKE9x1kUrsN6cCWg2I8"
SHEET_NAME = "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ


async def generate_drafts_for_wave(db: Session, df, wave):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É.

    :param db: –°–µ—Å—Å–∏—è –ë–î.
    :param df: DataFrame —Å –ª–∏–¥–∞–º–∏.
    :param wave: –û–±—ä–µ–∫—Ç –≤–æ–ª–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id} (–∫–æ–ª-–≤–æ –ª–∏–¥–æ–≤: {len(df)})")

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã
    template = db.query(Templates).filter_by(content_plan_id=wave.content_plan_id).first()
    if not template:
        logger.error(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    # üîπ –ë–µ—Ä–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ –∏–∑ `wave.subject`
    email_subject = wave.subject

    # 2Ô∏è‚É£ –†–∞–∑–±–∏–≤–∞–µ–º –ª–∏–¥–æ–≤ –Ω–∞ –±–∞—Ç—á–∏
    batch_size = 50
    leads_batches = [df[i:i + batch_size] for i in range(0, len(df), batch_size)]

    for batch in leads_batches:
        tasks = []
        for _, lead in batch.iterrows():
            tasks.append(generate_draft_for_lead(template, lead, email_subject, wave.wave_id))

        # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –≤ –±–∞—Ç—á–µ
        results = await asyncio.gather(*tasks)

        # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ (–µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å)
        successful_drafts = [res for res in results if res]

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        append_drafts_to_sheet(SHEET_ID, SHEET_NAME, successful_drafts)


async def generate_draft_for_lead(template, lead_data, subject, wave_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞ –¥–ª—è –ª–∏–¥–∞.

    :param template: –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞.
    :param lead_data: –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ (dict).
    :param subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª—è –≤—Å–µ–π –≤–æ–ª–Ω—ã).
    :param wave_id: ID –≤–æ–ª–Ω—ã.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º.
    """
    lead_id = lead_data.get("lead_id")
    email = lead_data.get("email")
    company_name = lead_data.get("company_name", "–ö–ª–∏–µ–Ω—Ç")

    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è lead_id={lead_id}...")

    prompt = f"""
    –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:
    {template.text}

    –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:
    {json.dumps(lead_data, ensure_ascii=False, indent=2)}

    –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞.
    """

    # üîπ 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–¥–µ–ª–∏
    for attempt in range(3):
        try:
            response = await send_to_model()  # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
            break  # –£—Å–ø–µ—Ö
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è lead_id={lead_id}: {e}")
            if attempt == 2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è lead_id={lead_id}", exc_info=True)
                return None
            await asyncio.sleep(2)

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    draft = {
        "wave_id": wave_id,
        "lead_id": lead_id,
        "email": email,
        "company_name": company_name,
        "subject": subject,  # ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Å–µ–º –≤ –≤–æ–ª–Ω–µ
        "text": response.strip()
    }

    return draft