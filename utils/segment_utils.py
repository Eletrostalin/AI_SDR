import json
from sqlalchemy.sql import text
import os
from sqlalchemy.orm import Session
import pandas as pd

from db.segmentation import FILTER_TYPES, EMAIL_SEGMENT_COLUMNS
from utils.utils import send_to_model, logger  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ–ª—å


def extract_filters_from_text(user_input: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    prompt = f"""
    –¢—ã ‚Äì –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –û–ø—Ä–µ–¥–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: {EMAIL_SEGMENT_COLUMNS}

    **–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ**, –≥–¥–µ:
    - –ö–ª—é—á–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    - –ó–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –±—É–ª–µ–≤—ã–º–∏ (`true`/`false`), —á–∏—Å–ª–∞–º–∏ (`int`), —Å—Ç—Ä–æ–∫–∞–º–∏ (`str`) –∏–ª–∏ —Å–ø–∏—Å–∫–∞–º–∏ (`list`).
    - –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–µ—Å—Ç—å email"), —Å—Ç–∞–≤—å `true`.
    - –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (`–±–æ–ª—å—à–µ 500`, `–º–µ–Ω–µ–µ 100`), –∑–∞–ø–∏—Å—ã–≤–∞–π –∏—Ö –∫–∞–∫ `{{"<": 100}}`.
    - –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É"), –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–æ–∫.

    **–ü—Ä–∏–º–µ—Ä—ã:**
    1Ô∏è‚É£ –í—Ö–æ–¥: "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ú–æ—Å–∫–≤–µ –∏ —É –∫–æ–≥–æ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
       –û—Ç–≤–µ—Ç:
       {{
         "filters": {{
           "region": ["–ú–æ—Å–∫–≤–∞"],
           "phone_number": true
         }}
       }}

    2Ô∏è‚É£ –í—Ö–æ–¥: "–ö–æ–º–ø–∞–Ω–∏–∏ —Å —á–∏—Å–ª–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ 500"
       –û—Ç–≤–µ—Ç:
       {{
         "filters": {{
           "employee_count": {{">": 500}}
         }}
       }}

    3Ô∏è‚É£ –í—Ö–æ–¥: "{user_input}"
       –û—Ç–≤–µ—Ç:
    """

    response = send_to_model(prompt)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
    logger.debug(f"üì• –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
    try:
        model_data = json.loads(response)
        filters = model_data.get("filters", {})

        if not isinstance(filters, dict):
            raise ValueError("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å).")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        validated_filters = {}
        for key, value in filters.items():
            if key in EMAIL_SEGMENT_COLUMNS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –¥–æ–ø—É—Å—Ç–∏–º
                if isinstance(value, (bool, str, int, list, dict)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
                    validated_filters[key] = value
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç: {key} ‚Üí {value}")

        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {validated_filters}")
        return validated_filters

    except (json.JSONDecodeError, ValueError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ


def apply_filters_to_email_table(db: Session, email_table_id: int, filters: dict) -> pd.DataFrame:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ email-—Ç–∞–±–ª–∏—Ü–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param email_table_id: ID email-—Ç–∞–±–ª–∏—Ü—ã.
    :param filters: –§–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    :return: DataFrame —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏.
    """
    try:
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ ID
        query_table = text("SELECT table_name FROM email_tables WHERE email_table_id = :email_table_id")
        result = db.execute(query_table, {"email_table_id": email_table_id}).fetchone()

        if not result:
            logger.error(f"‚ùå Email-—Ç–∞–±–ª–∏—Ü–∞ —Å ID {email_table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return pd.DataFrame()

        table_name = result[0]
        logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º email-—Ç–∞–±–ª–∏—Ü—É: {table_name}")

        # 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        query_data = f"SELECT * FROM {table_name}"
        df = pd.read_sql(query_data, db.bind)

        if df.empty:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞.")
            return pd.DataFrame()

        logger.debug(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}")
        logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")
        logger.debug(f"üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n{df.head()}")

        # 3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        logger.debug(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã: {filters}")

        for key, value in filters.items():
            if key not in df.columns:
                logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
                continue

            before_count = len(df)

            # üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (>, <)
            if isinstance(value, dict):
                for op, val in value.items():
                    if op == ">" and pd.api.types.is_numeric_dtype(df[key]):
                        df = df[df[key] > val]
                    elif op == "<" and pd.api.types.is_numeric_dtype(df[key]):
                        df = df[df[key] < val]
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä `{op}` –¥–ª—è {key}: {val}")

            # üîπ –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω–∏–π
            elif isinstance(value, list):
                df = df[df[key].astype(str).isin(map(str, value))]

            # üîπ –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é / –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –¥–∞–Ω–Ω—ã—Ö
            elif isinstance(value, bool):
                if value:  # True ‚Üí –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    df = df[df[key].notna() & (df[key].astype(str).str.strip() != "")]
                else:  # False ‚Üí –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                    df = df[df[key].isna() | (df[key].astype(str).str.strip() == "")]

            # üîπ –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ)
            else:
                df = df[df[key].astype(str) == str(value)]

            after_count = len(df)
            logger.debug(f"üìå –§–∏–ª—å—Ç—Ä `{key}` ‚Üí {value}: {before_count} ‚Üí {after_count} –∑–∞–ø–∏—Å–µ–π")

        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(df)}")
        return df

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ email-—Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)
        return pd.DataFrame()

def generate_excel_from_df(df: pd.DataFrame, company_id: int, campaign_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏.

    :param df: DataFrame —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    :param company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏.
    :param campaign_id: ID –∫–∞–º–ø–∞–Ω–∏–∏.
    :return: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    try:
        # ‚úÖ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = "filtered_results"
        os.makedirs(output_dir, exist_ok=True)

        # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(output_dir, f"filtered_emails_{company_id}_{campaign_id}.xlsx")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel
        df.to_excel(file_path, index=False)

        logger.info(f"üìÇ –§–∞–π–ª —Å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
        return file_path

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-—Ñ–∞–π–ª–∞: {e}", exc_info=True)
        return ""


def generate_segment_table_name(company_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email-–ª–∏–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–æ–º–ø–∞–Ω–∏–∏,
    –∏—Å–∫–ª—é—á–∞—è –∑–Ω–∞–∫ "-" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.

    :param company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).
    :return: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ segmentation_email_<company_id>.
    """
    if company_id is None:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω company_id=None –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã.")
        return None

    sanitized_company_id = abs(company_id)  # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ "-" (–µ—Å–ª–∏ –µ—Å—Ç—å)
    return f"segmentation_email_{sanitized_company_id}"