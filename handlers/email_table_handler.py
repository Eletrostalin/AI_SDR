import pandas as pd
from aiogram.filters import StateFilter
from aiogram.types import FSInputFile
from sqlalchemy.orm import Session
import os
import logging

from db.db import SessionLocal
from db.db_company import get_company_by_chat_id
from db.email_table_db import check_table_exists, get_table_data
from db.models import EmailTable
from utils.google_doc import create_excel_with_multiple_sheets
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from states.states import AddEmailSegmentationState
from utils.parser_email_table import save_cleaned_data, clean_dataframe, map_columns, clean_and_validate_emails
from utils.segment_utils import generate_segment_table_name

logger = logging.getLogger(__name__)
router = Router()


@router.message()
async def handle_email_table_request(message: Message, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email-—Ç–∞–±–ª–∏—Ü—ã.
    """
    logger.info("–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã email. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
        user_id = message.from_user.id
        segment_table_name = generate_segment_table_name(user_id)
        if segment_table_name is None:
            logger.error("‚ùå –û—à–∏–±–∫–∞: segment_table_name –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        logger.debug(f"üìå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: {segment_table_name}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(segment_table_name=segment_table_name)
        await state.set_state(AddEmailSegmentationState.waiting_for_file_upload)

        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {await state.get_data()}")

        await message.reply(
            f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –º–Ω–µ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –∞–¥—Ä–µ—Å–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª üìÇ —Å –µ–º–µ–π–ª–∞–º–∏ –≤ "
            f"—Ñ–æ—Ä–º–∞—Ç–µ XLSX"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(StateFilter(AddEmailSegmentationState.waiting_for_file_upload))
async def handle_file_upload(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å email-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π.
    """
    logger.debug(f"üìÇ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞
    if not message.document:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞.")
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx, .xls).")
        return

    document = message.document
    file_path = os.path.join("uploads", document.file_name)

    try:
        allowed_extensions = (".xlsx", ".xls")
        if not document.file_name.lower().endswith(allowed_extensions):
            await message.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel (.xlsx, .xls).")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π

        bot = message.bot

        os.makedirs("uploads", exist_ok=True)
        logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'uploads' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")

        await bot.download(document.file_id, destination=file_path)
        logger.info(f"üìÇ –§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {file_path}.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        state_data = await state.get_data()
        waiting_for_new_file = state_data.get("waiting_for_new_file", False)
        segment_table_name = state_data.get("segment_table_name")

        if waiting_for_new_file:
            logger.debug("üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–π —Ñ–∞–π–ª. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ.")
            await state.update_data(waiting_for_new_file=False)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        is_processed = await process_email_table(file_path, segment_table_name, message, state)

        if is_processed:
            await message.reply(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–∞–±–ª–∏—Ü—É: `{segment_table_name}`.")
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}.")
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}: {e}", exc_info=True)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóë –§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω.")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


def get_email_choice_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å (—Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏)", callback_data="split_emails")],
            [InlineKeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å (–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª)", callback_data="upload_new_file")]
        ]
    )


async def process_email_table(file_path: str, segment_table_name: str, message: Message, state: FSMContext) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É Excel, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫, –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É.
    """
    try:
        df = pd.read_excel(file_path)
        if df.empty:
            await message.reply("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return False

        df = clean_dataframe(df)
        if df.empty:
            await message.reply("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return False

        user_columns = df.columns.tolist()
        logger.debug(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_columns}")

        mapping = await map_columns(user_columns)
        if not mapping:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")
            return False

        df.rename(columns=mapping, inplace=True)
        logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞: {df.columns.tolist()}")

        df, valid_emails, multi_email_rows, problematic_rows, problematic_values = clean_and_validate_emails(df)

        if valid_emails is None:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ e-mail.")
            return False

        if multi_email_rows > 0:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {multi_email_rows} –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email. "
                           f"–ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫: {problematic_rows}. –ó–Ω–∞—á–µ–Ω–∏—è: {problematic_values}")

            await state.update_data(
                processing_df=df,
                email_column=valid_emails,
                segment_table_name=segment_table_name,
                problematic_rows=problematic_rows,
                problematic_values=problematic_values
            )

            logger.debug(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {AddEmailSegmentationState.duplicate_email_check}")
            await state.set_state(AddEmailSegmentationState.duplicate_email_check)
            logger.debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram
            values_display = "\n".join([f"üîπ **–°—Ç—Ä–æ–∫–∞ {row}**: `{val}`" for row, val in zip(problematic_rows, problematic_values)])

            await message.reply(
                f"‚ö†Ô∏è –í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ **{multi_email_rows}** –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ.\n\n"
                f"{values_display}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å:",
                reply_markup=get_email_choice_keyboard()
            )
            return False  # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        await save_cleaned_data(df, segment_table_name, message)
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False


@router.callback_query()
async def handle_email_choice_callback(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–∞–∑–¥–µ–ª–∏—Ç—å email-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏).
    """
    logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {call.data}")

    choice = call.data
    data = await state.get_data()
    df = data.get("processing_df")
    email_column = data.get("email_column")
    segment_table_name = data.get("segment_table_name")

    if choice == "split_emails":
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email.")

        df = df.assign(**{email_column: df[email_column].str.split(r"[;, ]")}).explode(email_column)
        df[email_column] = df[email_column].str.strip()

        await call.message.edit_text("‚úÖ –ó–∞–ø–∏—Å–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ **–æ–¥–∏–Ω** email.")

        await save_cleaned_data(df, segment_table_name, call.message)
        await state.clear()

    elif choice == "upload_new_file":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

        await state.set_state(AddEmailSegmentationState.waiting_for_file_upload)
        await call.message.edit_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")

    else:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)


async def handle_view_email_table(message: Message, state):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email –∫–æ–º–ø–∞–Ω–∏–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: FSMContext –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    chat_id = str(message.chat.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chat_id –≤ —Å—Ç—Ä–æ–∫—É
    db: Session = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ chat_id
        company = get_company_by_chat_id(db, chat_id)
        if not company:
            await message.reply("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ email —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
        email_tables = db.query(EmailTable).filter(EmailTable.company_id == company.company_id).all()
        if not email_tables:
            await message.reply("–î–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email.")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
        excel_data = {}
        for email_table in email_tables:
            table_name = email_table.table_name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
            if not check_table_exists(db, table_name):
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            data = get_table_data(db, table_name, limit=1000)
            if not data:
                logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞.")
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {data}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
            headers = list(data[0].keys())  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            rows = [headers] + [list(row.values()) for row in data]
            excel_data[table_name] = rows

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not excel_data:
            await message.reply("–ù–∏ –æ–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π Excel-–¥–æ–∫—É–º–µ–Ω—Ç —Å –ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        file_path = create_excel_with_multiple_sheets(excel_data, file_name=f"{company.name}_email_tables.xlsx")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        excel_file = FSInputFile(file_path)
        await message.reply_document(document=excel_file, caption="–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ email —Ç–∞–±–ª–∏—Ü –∫–æ–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        db.close()