from sqlalchemy import MetaData, Table, Column, Integer, String, DateTime, inspect
from sqlalchemy.exc import ProgrammingError
import logging

logger = logging.getLogger(__name__)

# –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
DYNAMIC_EMAIL_TABLE_COLUMNS = [
    Column("file_name", String, nullable=True),
    Column("name", String, nullable=True),
    Column("region", String, nullable=True),
    Column("msp_registry", String, nullable=True),
    Column("director_name", String, nullable=True),
    Column("director_position", String, nullable=True),
    Column("phone_number", String, nullable=True),
    Column("email", String, nullable=True),
    Column("website", String, nullable=True),
    Column("primary_activity", String, nullable=True),
    Column("revenue", String, nullable=True),
    Column("employee_count", String, nullable=True),
    Column("branch_count", String, nullable=True)
]

def create_dynamic_email_table(engine, table_name: str) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.

    :param engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞.
    """
    try:
        metadata = MetaData()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        table = Table(
            table_name,
            metadata,
            Column("id", Integer, primary_key=True, autoincrement=True),
            *DYNAMIC_EMAIL_TABLE_COLUMNS,
        )

        logger.debug(f"üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        inspector = inspect(engine)
        if inspector.has_table(table_name):
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
            return

        logger.debug(f"üìå –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É '{table_name}' —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {[col.name for col in table.columns]}")
        metadata.create_all(engine, tables=[table])

        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    except ProgrammingError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}", exc_info=True)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}", exc_info=True)