from sqlalchemy import MetaData, Table, Column, Integer, String, inspect
from sqlalchemy.exc import ProgrammingError
import logging

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è, —Ç–∏–ø)
DYNAMIC_EMAIL_TABLE_COLUMNS = [
    ("file_name", String),
    ("name", String),
    ("region", String),
    ("msp_registry", String),
    ("director_name", String),
    ("director_position", String),
    ("phone_number", String),
    ("email", String),
    ("website", String),
    ("primary_activity", String),
    ("revenue", String),
    ("employee_count", String),
    ("branch_count", String)
]


def create_dynamic_email_table(engine, table_name: str) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ email –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.

    :param engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞.
    """
    try:
        metadata = MetaData(bind=engine)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π metadata
        inspector = inspect(engine)

        existing_tables = inspector.get_table_names()
        logger.debug(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

        if table_name in existing_tables:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
            return

        logger.debug(f"üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã `Column()` –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        dynamic_columns = [Column("id", Integer, primary_key=True, autoincrement=True)] + [
            Column(name, col_type, nullable=True) for name, col_type in DYNAMIC_EMAIL_TABLE_COLUMNS
        ]

        table = Table(table_name, metadata, *dynamic_columns)
        logger.debug(f"üìå –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É '{table_name}' —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {[col.name for col in table.columns]}")

        metadata.create_all(engine, tables=[table])

        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    except ProgrammingError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}", exc_info=True)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}", exc_info=True)