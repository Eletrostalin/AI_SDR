import json
import logging

from db.db import SessionLocal
from db.segmentation import FILTER_TYPES
from utils.utils import send_to_model, logger  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ–ª—å

def extract_filters_from_text(user_input: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    prompt = f"""
    –¢—ã ‚Äì –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –û–ø—Ä–µ–¥–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: {list(FILTER_TYPES.keys())}

    **–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ**, –≥–¥–µ:
    - –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ, —Å—Ç—Ä–æ–∫–∞, –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–æ–∫).
    - –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–µ—Å—Ç—å email"), —Å—Ç–∞–≤—å `true`.
    - –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (`–±–æ–ª—å—à–µ 500`, `–º–µ–Ω–µ–µ 100`), –∑–∞–ø–∏—Å—ã–≤–∞–π –∏—Ö –∫–∞–∫ `{{"<": 100}}`.
    - –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É"), –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–æ–∫.

    **–ü—Ä–∏–º–µ—Ä—ã:**
    1Ô∏è‚É£ –í—Ö–æ–¥: "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ú–æ—Å–∫–≤–µ –∏ —É –∫–æ–≥–æ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
       –û—Ç–≤–µ—Ç:
       {{
         "filters": {{
           "region": ["–ú–æ—Å–∫–≤–∞"],
           "phone_number": true
         }}
       }}

    2Ô∏è‚É£ –í—Ö–æ–¥: "–ö–æ–º–ø–∞–Ω–∏–∏ —Å —á–∏—Å–ª–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ 500"
       –û—Ç–≤–µ—Ç:
       {{
         "filters": {{
           "employee_count": {{">": 500}}
         }}
       }}

    3Ô∏è‚É£ –í—Ö–æ–¥: "–í—Å–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è –∏ –±–æ–ª—å—à–µ 10 —Ñ–∏–ª–∏–∞–ª–æ–≤"
       –û—Ç–≤–µ—Ç:
       {{
         "filters": {{
           "licenses": true,
           "branch_count": {{">": 10}}
         }}
       }}

    4Ô∏è‚É£ –í—Ö–æ–¥: "{user_input}"
       –û—Ç–≤–µ—Ç:
    """

    logger.debug(f"üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å:\n{prompt}")

    response = send_to_model(prompt)
    logger.debug(f"üì• –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response}")

    # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
    try:
        model_data = json.loads(response)
        filters = model_data.get("filters", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        validated_filters = {}
        for key, value in filters.items():
            if key in FILTER_TYPES:
                expected_types = FILTER_TYPES[key]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º bool
                if isinstance(value, bool) and "bool" in expected_types:
                    validated_filters[key] = value

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
                elif isinstance(value, list) and all(isinstance(i, str) for i in value) and "list" in expected_types:
                    validated_filters[key] = value

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ + –æ–ø–µ—Ä–∞—Ç–æ—Ä
                elif isinstance(value, dict) and all(
                        isinstance(v, (int, str)) for v in value.values()) and "dict" in expected_types:
                    validated_filters[key] = value

                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç: {key} ‚Üí {value}")

        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {validated_filters}")
        return validated_filters

    except (json.JSONDecodeError, ValueError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        return {}

def get_matching_record_count(table_name: str, segments: list) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–∞–º.
    """
    db = SessionLocal()
    try:
        query = f"""
        SELECT COUNT(*) FROM {table_name}
        WHERE segment IN :segments
        """
        result = db.execute(query, {"segments": tuple(segments)}).scalar()
        return result or 0
    finally:
        db.close()