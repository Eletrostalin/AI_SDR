import asyncio
import pandas as pd
from sqlalchemy.orm import Session

from db import db
from db.models import Templates, ContentPlan, Waves
from logger import logger
from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model


async def generate_drafts_for_wave(db_session, df, wave_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É.

    :param db_session: –°–µ—Å—Å–∏—è –ë–î.
    :param df: DataFrame —Å –ª–∏–¥–∞–º–∏.
    :param wave_id: ID –≤–æ–ª–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave_id}")

    wave = db_session.query(Waves).filter_by(wave_id=wave_id).first()
    if not wave:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: –í–æ–ª–Ω–∞ —Å ID {wave_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    logger.info(f"üåä –í–æ–ª–Ω–∞ ID {wave.wave_id} –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(df)} –ª–∏–¥–æ–≤.")

    template = db_session.query(Templates).filter_by(wave_id=wave.wave_id).first()
    if not template:
        logger.error(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    content_plan = db_session.query(ContentPlan).filter_by(content_plan_id=wave.content_plan_id).first()
    description = content_plan.description if content_plan else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    email_subject = wave.subject

    batch_size = 50
    leads_batches = [df[i:i + batch_size] for i in range(0, len(df), batch_size)]
    logger.info(f"üì¶ –†–∞–∑–±–∏–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {len(leads_batches)} –ø–∞—Ä—Ç–∏–π –ø–æ {batch_size} –ª–∏–¥–æ–≤")

    for batch_num, batch in enumerate(leads_batches, start=1):
        logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–∏–∏ {batch_num} –∏–∑ {len(leads_batches)}")

        tasks = [
            generate_draft_for_lead(template, lead, email_subject, wave.wave_id, description)
            for _, lead in batch.iterrows()
        ]

        results = await asyncio.gather(*tasks)
        successful_drafts = [res for res in results if res]

        if successful_drafts:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(successful_drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets.")
            append_drafts_to_sheet(successful_drafts)
        else:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏.")


async def generate_draft_for_lead(template, lead_data, subject, wave_id, description):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞ –¥–ª—è –ª–∏–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

    :param template: –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞.
    :param lead_data: –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ (dict).
    :param subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞.
    :param wave_id: ID –≤–æ–ª–Ω—ã.
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º.
    """
    lead_id = lead_data.get("id")
    email = lead_data.get("email")
    company_name = lead_data.get("name", "–ö–ª–∏–µ–Ω—Ç")
    region = lead_data.get("region", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    map_registry = lead_data.get("map_registry", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    director_name = lead_data.get("director_name", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    director_position = lead_data.get("director_position", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    phone_number = lead_data.get("phone_number", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    website = lead_data.get("website", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    primary_activity = lead_data.get("primary_activity", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    revenue = lead_data.get("revenue", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    employee_count = lead_data.get("employee_count", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    branch_count = lead_data.get("branch_count", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {company_name} (lead_id={lead_id})...")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    prompt = f"""
    –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:
    {template.template_content}

    –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
    - –ù–∞–∑–≤–∞–Ω–∏–µ: {company_name}
    - –†–µ–≥–∏–æ–Ω: {region}
    - –í—Ö–æ–¥–∏—Ç –≤ —Ä–µ–µ—Å—Ç—Ä: {map_registry}
    - –î–∏—Ä–µ–∫—Ç–æ—Ä: {director_name} ({director_position})
    - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_number}
    - –í–µ–±-—Å–∞–π—Ç: {website}
    - –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {primary_activity}
    - –í—ã—Ä—É—á–∫–∞: {revenue}
    - –ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employee_count}
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {branch_count}

    üì¢ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:
    {description}

    üéØ –ó–∞–¥–∞—á–∞:
    - –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
    - –°–¥–µ–ª–∞–π –ø–∏—Å—å–º–æ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –¥–æ–±–∞–≤—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({primary_activity}).
    - –ò—Å–ø–æ–ª—å–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ü–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏.
    - –ü–µ—Ä–µ–º–µ—à–∞–π –∞–±–∑–∞—Ü—ã, –¥–æ–±–∞–≤—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.
    - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–∏—Å—å–º–∞ –Ω–µ –±—ã–ª–∏ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–º–∏.
    –í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ!! –ï—Å–ª–∏ –≤ –∫–∞–∫–∏—Ö —Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—É–¥–µ—Ç None –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞.
    """

    # –ü–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (3 —Ä–∞–∑–∞)
    for attempt in range(3):
        try:
            response = send_to_model(prompt)
            if not response:
                raise ValueError("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç")
            break
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è lead_id={lead_id}: {e}")
            if attempt == 2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è lead_id={lead_id}", exc_info=True)
                return None
            await asyncio.sleep(2)

    return {
        "wave_id": wave_id,
        "lead_id": lead_id,
        "email": email,
        "company_name": company_name,
        "subject": subject,
        "text": response.strip()
    }