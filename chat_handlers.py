from aiogram import Router, Bot
from aiogram.exceptions import TelegramMigrateToChat
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, ChatMemberUpdated, ContentType
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from aiogram.filters import Command

from admin.ThreadManager import save_thread_to_db, create_new_thread
from classifier import classify_message
from db.db import SessionLocal
from db.db_auth import create_or_get_company_and_user
from db.models import Company
from dispatcher import dispatch_classification
from handlers.company_handlers import process_edit_company_information, confirm_edit_company_information
from handlers.onboarding_handler import handle_company_name, handle_industry, handle_region, handle_contact_email, \
    handle_contact_phone, handle_additional_details, handle_confirmation
from utils.states import OnboardingState, BaseState, EditCompanyState
import logging

logger = logging.getLogger(__name__)
router = Router()



@router.message(Command("init"))
async def initialize_topics(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /init: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –≤ —á–∞—Ç–µ.
    """
    chat_id = message.chat.id
    bot = message.bot

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await bot.get_chat(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —á–∞—Ç —Ç–µ–º—ã
        if not chat.is_forum:
            await message.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        admins = await bot.get_chat_administrators(chat_id)
        bot_admin = next((admin for admin in admins if admin.user.id == bot.id), None)
        if not bot_admin or not bot_admin.can_manage_chat:
            await message.answer("–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏.")
            return

        db: Session = SessionLocal()
        try:
            created_threads = []

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã "Notification"
            notification_topic_id = await create_new_thread(bot, chat_id, "Notification")
            if notification_topic_id:
                save_thread_to_db(db, chat_id, notification_topic_id, "Notification")
                created_threads.append("Notification")

            logger.info(f"–¢–µ–º—ã {created_threads} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ —á–∞—Ç–µ {chat_id}.")
            await message.answer(f"–¢–µ–º—ã {', '.join(created_threads)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")
        finally:
            db.close()

    except TelegramMigrateToChat as migrate_error:
        new_chat_id = migrate_error.migrate_to_chat_id
        logger.warning(f"–ß–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã. –ù–æ–≤—ã–π ID: {new_chat_id}")
        await message.answer(f"–ß–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã. –ù–æ–≤—ã–π ID: {new_chat_id}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /init –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")


@router.chat_member()
async def greet_new_user(event: ChatMemberUpdated, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç.
    """
    if event.new_chat_member.status == "member" and event.old_chat_member.status in {"left", "kicked"}:
        telegram_user = event.new_chat_member.user
        chat_id = event.chat.id
        bot_id = event.bot.id  # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞

        logger.debug(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        db: Session = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            existing_company = db.query(Company).filter_by(chat_id=str(chat_id)).first()

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = create_or_get_company_and_user(db, telegram_user, chat_id)

            if not existing_company:
                # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
                logger.debug(
                    f"–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è {telegram_user.full_name}.")

                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await state.storage.set_state(
                    key=StorageKey(bot_id=bot_id, user_id=telegram_user.id, chat_id=chat_id),
                    state=OnboardingState.waiting_for_company_name
                )
                await state.storage.set_data(
                    key=StorageKey(bot_id=bot_id, user_id=telegram_user.id, chat_id=chat_id),
                    data={"company_id": user.company_id}
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_state = await state.storage.get_state(
                    key=StorageKey(bot_id=bot_id, user_id=telegram_user.id, chat_id=chat_id)
                )
                logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {telegram_user.full_name}: {current_state}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –æ–±—â–∏–π —á–∞—Ç
                await event.bot.send_message(
                    chat_id=chat_id,  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç
                    text=(
                        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegram_user.full_name}!\n"
                        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
                    )
                )
            else:
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                logger.debug(
                    f"–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
                await event.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegram_user.full_name}!\n"
                        "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å."
                    )
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        finally:
            db.close()

@router.message()
async def handle_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –±–æ—Ç–æ–º
    if message.from_user and message.from_user.is_bot:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        return

    current_state = await state.get_state()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.content_type in {ContentType.NEW_CHAT_MEMBERS, ContentType.LEFT_CHAT_MEMBER}:
        logger.debug("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥).")
        if message.content_type == ContentType.NEW_CHAT_MEMBERS:
            for new_member in message.new_chat_members:
                event = ChatMemberUpdated(
                    chat=message.chat,
                    from_user=message.from_user,
                    new_chat_member=new_member,
                    old_chat_member=message.from_user,
                )
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_member.full_name}")
                await greet_new_user(event, state)
        logger.debug("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state is None:
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await state.set_state(BaseState.default.state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            classification = classify_message(message.text)  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {classification}")
            await dispatch_classification(classification, message, state)  # –ü–µ—Ä–µ–¥–∞—á–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    if current_state == EditCompanyState.waiting_for_updated_info.state:
        await process_edit_company_information(message, state)
        return
    elif current_state == EditCompanyState.waiting_for_confirmation.state:
        await confirm_edit_company_information(message, state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    if current_state == OnboardingState.waiting_for_company_name.state:
        await handle_company_name(message, state)
    elif current_state == OnboardingState.waiting_for_industry.state:
        await handle_industry(message, state)
    elif current_state == OnboardingState.waiting_for_region.state:
        await handle_region(message, state)
    elif current_state == OnboardingState.waiting_for_contact_email.state:
        await handle_contact_email(message, state)
    elif current_state == OnboardingState.waiting_for_contact_phone.state:
        await handle_contact_phone(message, state)
    elif current_state == OnboardingState.waiting_for_additional_details.state:
        await handle_additional_details(message, state)
    elif current_state == OnboardingState.confirmation.state:
        await handle_confirmation(message, state)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")