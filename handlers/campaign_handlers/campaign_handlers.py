from aiogram.types import FSInputFile
from sqlalchemy.sql import text
from aiogram.filters import StateFilter
from admin.ThreadManager import create_thread
from db.db_campaign import create_campaign_and_thread, save_campaign_to_db
from db.db_thread import save_thread_to_db
from handlers.content_plan_handlers.content_plan_handlers import handle_add_content_plan
from logger import logger
from db.db import SessionLocal
from db.db_company import get_company_by_chat_id
from promts.campaign_promt import EMAIL_SEGMENT_COLUMNS
from states.states import AddCampaignState
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from utils.segment_utils import extract_filters_from_text, apply_filters_to_email_table, generate_excel_from_df

router = Router()



@router.message(StateFilter(None))
async def handle_add_campaign(message: Message, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∫–∞–º–ø–∞–Ω–∏—é. –Ø –ø–æ–º–æ–≥—É –í–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ üè∑Ô∏è")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
    await state.set_state(AddCampaignState.waiting_for_campaign_name)


@router.message(StateFilter(AddCampaignState.waiting_for_campaign_name))
async def process_campaign_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ —Ç–µ–º—É —á–∞—Ç–∞.
    """
    campaign_name = message.text.strip()

    if not campaign_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    chat_id = message.chat.id
    bot = message.bot

    try:
        with SessionLocal() as db:
            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–∞–º–ø–∞–Ω–∏—é
            new_campaign = await create_campaign_and_thread(bot, db, chat_id, campaign_name)

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º email_table_id –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            email_table = db.execute(
                text("SELECT email_table_id FROM email_tables WHERE company_id = :company_id"),
                {"company_id": new_campaign.company_id}
            ).fetchone()

            if not email_table:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ email-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è company_id={new_campaign.company_id}")
                email_table_id = None
            else:
                email_table_id = email_table[0]
                logger.info(f"üì© –ò—Å–ø–æ–ª—å–∑—É–µ–º email_table_id={email_table_id} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {new_campaign.company_id}")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        campaign_data = {
            "campaign_id": new_campaign.campaign_id,
            "campaign_name": campaign_name,
            "company_id": new_campaign.company_id,
            "email_table_id": email_table_id
        }
        await state.update_data(campaign_data=campaign_data)
        logger.debug(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ state: {campaign_data}")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–µ–º—É
        EMAIL_SEGMENT_TRANSLATIONS = {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            "region": "–†–µ–≥–∏–æ–Ω",
            "msp_registry": "–†–µ–µ—Å—Ç—Ä –ú–°–ü",
            "director_name": "–ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
            "director_position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
            "phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "email": "Email",
            "website": "–í–µ–±-—Å–∞–π—Ç",
            "primary_activity": "–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "revenue": "–í—ã—Ä—É—á–∫–∞",
            "employee_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        }

        segment_columns = ", ".join(
            EMAIL_SEGMENT_TRANSLATIONS.get(col, col) for col in EMAIL_SEGMENT_COLUMNS
        )

        await message.bot.send_message(
            chat_id=chat_id,
            message_thread_id=new_campaign.thread_id,
            text=f"(–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)\n\n"
                 f"üîπ {segment_columns}\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                 f"\n–ö—Ä–∏—Ç–µ—Ä–∏–π - –ó–Ω–∞—á–µ–Ω–∏–µ\n\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π.\n"
                 f"–ü—Ä–∏–º–µ—Ä:\n"
                 f"\n–†–µ–≥–∏–æ–Ω - –ú–æ—Å–∫–≤–∞\n–ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ - –°–µ—Ä–≥–µ–π\n"
        )

        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        await state.set_state(AddCampaignState.waiting_for_filters)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AddCampaignState.waiting_for_filters))
async def process_filters(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ç–∞–±–ª–∏—Ü—É.
    """
    user_input = message.text.strip()

    try:
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = extract_filters_from_text(user_input)

        if not filters:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        state_data = await state.get_data()
        campaign_data = state_data.get("campaign_data", {})
        company_id = campaign_data.get("company_id")
        campaign_id = campaign_data.get("campaign_id")
        email_table_id = campaign_data.get("email_table_id")

        logger.debug(f"üîç –î–∞–Ω–Ω—ã–µ –∏–∑ state –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {campaign_data}")

        if not company_id or not campaign_id or not email_table_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ö–∞–º–ø–∞–Ω–∏—è –∏–ª–∏ email-—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        with SessionLocal() as db:
            filtered_df = apply_filters_to_email_table(db, email_table_id, filters)

        if filtered_df.empty:
            await message.reply("‚ö†Ô∏è –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
            return

        # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        excel_path = generate_excel_from_df(filtered_df, company_id, campaign_id)

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_document(
            FSInputFile(excel_path),
            caption="üìÇ –í–∞—à —Ñ–∞–π–ª —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ email-–ª–∏–¥–∞–º–∏."
        )

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        campaign_data["filters"] = filters
        await state.update_data(campaign_data=campaign_data)

        logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {filters}")

        # ‚úÖ –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        await message.reply("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(AddCampaignState.waiting_for_start_date)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(AddCampaignState.waiting_for_missing_data))
async def process_missing_data(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏).
    """
    user_input = message.text.strip()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        campaign_data = state_data.get("campaign_data", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        if "start_date" not in campaign_data or not campaign_data.get("start_date"):
            from datetime import datetime
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
                start_date = datetime.strptime(user_input, "%d.%m.%Y")
                campaign_data["start_date"] = user_input
                await state.update_data(campaign_data=campaign_data)
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                if not campaign_data.get("end_date"):
                    await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
                    return
            except ValueError:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

        if "end_date" not in campaign_data or not campaign_data.get("end_date"):
            from datetime import datetime
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
                end_date = datetime.strptime(user_input, "%d.%m.%Y")
                campaign_data["end_date"] = user_input
                await state.update_data(campaign_data=campaign_data)
            except ValueError:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if campaign_data.get("start_date") and campaign_data.get("end_date"):
            await state.update_data(campaign_data=campaign_data)
            await message.reply(
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {campaign_data.get('campaign_name')}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {campaign_data['start_date']}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {campaign_data['end_date']}\n"
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {campaign_data.get('params', {})}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            await state.set_state(AddCampaignState.waiting_for_confirmation)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def confirm_campaign(message: Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.
    """
    campaign_data = await state.get_data("campaign_data")
    await message.reply(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {campaign_data.get('campaign_name')}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {campaign_data.get('start_date')}\n"
        f"–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞: {campaign_data.get('end_date')}\n"
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {campaign_data.get('params')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(AddCampaignState.waiting_for_confirmation)


@router.message(StateFilter(AddCampaignState.waiting_for_confirmation))
async def confirm_campaign_creation(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.
    """
    user_input = message.text.strip().lower()
    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {user_input}")

    if user_input not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    if user_input == "–¥–∞":
        db = SessionLocal()
        try:
            logger.debug("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏.")
            state_data = await state.get_data()
            campaign_data = state_data.get("campaign_data")
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {campaign_data}")

            chat_id = str(message.chat.id)
            company = get_company_by_chat_id(db, chat_id)
            logger.debug(f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company}")

            if not company:
                logger.error(f"–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id={chat_id}")
                await message.reply("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞–º–ø–∞–Ω–∏–∏.")
                return

            # –°–æ–∑–¥–∞—ë–º —Ç–µ–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            bot = message.bot
            thread_name = f"–ö–∞–º–ø–∞–Ω–∏—è: {campaign_data['campaign_name']}"
            thread_id = await create_thread(bot, chat_id, thread_name)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–Ω—ã–π thread_id: {thread_id}")

            if thread_id:
                campaign_data["thread_id"] = thread_id
                await state.update_data(campaign_data=campaign_data)
            else:
                logger.error("–û—à–∏–±–∫–∞: thread_id –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
                raise ValueError("–û—à–∏–±–∫–∞: thread_id –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –±–∞–∑—É. chat_id={chat_id}, thread_id={thread_id}, thread_name={thread_name}")
            save_thread_to_db(db, chat_id, thread_id, thread_name)

            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑—É. company_id={company.company_id}, campaign_data={campaign_data}")
            save_campaign_to_db(db, company.company_id, campaign_data)

            await message.reply(f"–ö–∞–º–ø–∞–Ω–∏—è '{campaign_data['campaign_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è '{campaign_data['campaign_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            await message.reply("–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏...")
            await handle_add_content_plan(message, state, thread_id=thread_id)  # –ü–µ—Ä–µ–¥–∞–µ–º thread_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏.")
        finally:
            db.close()
            logger.debug("–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
    else:
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()


def validate_model_response(response: dict, state_data: dict) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è—è –∏–º—è –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    :param response: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å).
    :param state_data: –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {response}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        campaign_data = {
            "campaign_name": state_data.get("campaign_name") or response.get("campaign_name", "").strip() or None,
            "start_date": response.get("start_date", "").strip(),
            "end_date": response.get("end_date", "").strip(),
            "filters": response.get("filters", {}),
            "params": response.get("params", {}),
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
        from datetime import datetime
        if campaign_data["start_date"]:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: {campaign_data['start_date']}")
            campaign_data["start_date"] = datetime.strptime(
                campaign_data["start_date"], "%d.%m.%Y"
            ).strftime("%d.%m.%Y")
        if campaign_data["end_date"]:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {campaign_data['end_date']}")
            campaign_data["end_date"] = datetime.strptime(
                campaign_data["end_date"], "%d.%m.%Y"
            ).strftime("%d.%m.%Y")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ "filters" –∏ "params" —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—è–º–∏
        if not isinstance(campaign_data["filters"], dict):
            logger.warning(f"–ü–æ–ª–µ 'filters' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {campaign_data['filters']}")
            campaign_data["filters"] = {}
        if not isinstance(campaign_data["params"], dict):
            logger.warning(f"–ü–æ–ª–µ 'params' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {campaign_data['params']}")
            campaign_data["params"] = {}

        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {campaign_data}")
        return campaign_data
    except (ValueError, KeyError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {e}", exc_info=True)
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {response}")
        return {}


# text=f"üìä –ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –∏–∑ –±–∞–∑—ã email –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫—É?\n\n"
#                  f"(–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)\n\n"
#                  f"üîπ {segment_columns}\n\n"
#                  f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
#                  f"\n–ö—Ä–∏—Ç–µ—Ä–∏–π - –ó–Ω–∞—á–µ–Ω–∏–µ\n\n"
#                  f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π.\n"
#                  f"–ü—Ä–∏–º–µ—Ä:\n"
#                  f"\n–†–µ–≥–∏–æ–Ω - –ú–æ—Å–∫–≤–∞\n–ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ - –°–µ—Ä–≥–µ–π\n"