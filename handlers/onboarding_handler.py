from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
import pandas as pd
import io

from db.db import SessionLocal
from db.db_company import save_company_info
from db.models import CompanyInfo, User, EmailConnections
from handlers.email_table_handler import handle_email_table_request
from states.states import OnboardingState

import logging

logger = logging.getLogger(__name__)
router = Router()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –º–∞–ø–∏–Ω–≥–∞
COLUMN_MAPPING = {
    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": "company_name",
    "–ú–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏": "company_mission",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∏—Å—Å–∏—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏)": "company_values",
    "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "business_sector",
    "–ê–¥—Ä–µ—Å–∞ –æ—Ñ–∏—Å–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã": "office_addresses_and_hours",
    "–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã": "resource_links",
    "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (B2B/B2C, –Ω–∏—à–∞, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è)": "target_audience_b2b_b2c_niche_geography",
    "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–£–¢–ü)": "unique_selling_proposition",
    "–ë–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤": "customer_pain_points",
    "–û—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤": "competitor_differences",
    "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å": "promoted_products_and_services",
    "–ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏/–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç": "delivery_availability_geographical_coverage",
    "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ) —Å –æ—Ç–≤–µ—Ç–∞–º–∏": "frequently_asked_questions_with_answers",
    "–¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö": "common_customer_objections_and_responses",
    "–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤": "successful_case_studies",
    "–ü—Ä–æ—á–µ–µ": "additional_information",
    "–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è?! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ": "missing_field_feedback",
}



@router.callback_query(lambda c: c.data in ["skip_missing_fields", "fill_missing_fields"],
                       OnboardingState.missing_fields)
async def handle_missing_fields_callback(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    """
    await call.answer()

    if call.data == "skip_missing_fields":
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è.")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        company_id = data.get("company_id")
        brief_data = data.get("brief_data", {})

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º confirm_brief(), –∞ –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
        if not company_id or not brief_data:
            logger.warning("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(OnboardingState.waiting_for_brief)
            return

        # –û—á–∏—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(missing_fields=[])
        await confirm_brief(call.message, state)

    elif call.data == "fill_missing_fields":
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        await state.set_state(OnboardingState.waiting_for_brief)
        await call.message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")


@router.message(OnboardingState.waiting_for_brief)
async def handle_brief_upload(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    """
    logger.info("üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∏—Ñ–∞ –∑–∞–ø—É—â–µ–Ω.")

    if not message.document or not message.document.file_name.endswith(".xlsx"):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        return

    db: Session = SessionLocal()
    user = db.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
    db.close()

    if not user or not user.company_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    company_id = user.company_id  # ‚úÖ company_id –ø–æ–ª—É—á–µ–Ω
    logger.debug(f"üîπ –ù–∞–π–¥–µ–Ω company_id: {company_id}")

    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)
    file_stream = await message.bot.download_file(file.file_path)

    try:
        df = pd.read_excel(io.BytesIO(file_stream.read()), header=None)
        df.iloc[:2] = df.iloc[:2].ffill(axis=1)
        company_name = str(df.iloc[2, 2]).strip()

        if not company_name:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        brief_data = {"company_name": company_name}
        original_headers = [
            str(df.iloc[i, 0]).strip() for i in range(2, len(df)) if pd.notna(df.iloc[i, 0])
        ]

        for i in range(2, len(df)):
            key = str(df.iloc[i, 0]).strip()
            value = str(df.iloc[i, 2]).strip() if pd.notna(df.iloc[i, 2]) else None
            if key and value:
                brief_data[key] = value

        logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {brief_data}")

        renamed_data = {COLUMN_MAPPING.get(k, k): v for k, v in brief_data.items()}
        missing_fields = {k for k in original_headers if k not in brief_data and k.lower() != "nan"}

        # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ FSMContext
        await state.update_data(brief_data=renamed_data, company_id=company_id, missing_fields=[])
        logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSMContext: {await state.get_data()}")

        if missing_fields:
            await state.update_data(missing_fields=list(missing_fields))
            await state.set_state(OnboardingState.missing_fields)

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_missing_fields")],
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="fill_missing_fields")]
                ]
            )

            await message.answer(
                f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö:\n\n{', '.join(missing_fields)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            return

        # ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
        logger.debug("üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ confirm_brief")
        await confirm_brief(message, state)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def confirm_brief(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É.
    –ï—Å–ª–∏ company_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –ø–æ chat_id.
    """
    data = await state.get_data()
    company_id = data.get("company_id")
    brief_data = data.get("brief_data", {})

    logger.debug(f"üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {data}")

    # –ï—Å–ª–∏ company_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã
    if not company_id:
        logger.warning("üîÑ company_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã.")

        db: Session = SessionLocal()
        try:
            user = db.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if user and user.company_id:
                company_id = user.company_id
                logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–µ–Ω company_id: {company_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ company_id –¥–ª—è telegram_id {message.from_user.id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                await state.set_state(OnboardingState.waiting_for_brief)
                return
        finally:
            db.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if not brief_data:
        logger.error("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(OnboardingState.waiting_for_brief)
        return

    # üîπ –õ–æ–≥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    logger.debug(f"üõ† –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ë–î: company_id={company_id}, brief_data={brief_data}")

    success = save_company_info(company_id, brief_data)

    if success:
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")
        await message.answer("–ì–æ—Ç–æ–≤–æ! ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–æ–≥—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await handle_email_table_request(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ email-—Ç–∞–±–ª–∏—Ü—ã
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(OnboardingState.missing_fields)
async def handle_missing_fields_response(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö.
    """
    response = message.text.strip().lower()

    if response == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.")

        # –û—á–∏—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.update_data(missing_fields=[])
        await state.set_state(OnboardingState.confirmation)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await confirm_brief(message, state)

    elif response == "–∑–∞–ø–æ–ª–Ω–∏—Ç—å":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è. –ñ–¥—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

        await state.set_state(OnboardingState.waiting_for_brief)
        await message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ **'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'** –∏–ª–∏ **'–ó–∞–ø–æ–ª–Ω–∏—Ç—å'**.")
