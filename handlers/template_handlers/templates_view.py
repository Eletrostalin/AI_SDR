from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, CallbackQuery, message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session

from db.db import SessionLocal
from db.models import Templates, Waves, ContentPlan, Campaigns

import logging

from states.states import TemplateStates

logger = logging.getLogger(__name__)
router = Router()

# üìå 1. –ö–æ–º–∞–Ω–¥–∞ /view_templates - –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
@router.message(Command("view_templates"))
async def view_templates(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏.
    """
    db = SessionLocal()
    thread_id = message.message_thread_id  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
    user_id = message.from_user.id

    logger.info(f"üë§ [User {user_id}] –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /view_templates –≤ —Ç–µ–º–µ {thread_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ thread_id
        campaign = db.query(Campaigns).filter_by(thread_id=thread_id).first()
        if not campaign:
            await message.reply("–ö–∞–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        content_plans = db.query(ContentPlan).filter_by(campaign_id=campaign.campaign_id).all()

        if not content_plans:
            await message.reply("–î–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardBuilder()
        for content_plan in content_plans:
            keyboard.add(InlineKeyboardButton(
                text=content_plan.description or f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan.content_plan_id}",
                callback_data=f"view_content_plan:{content_plan.content_plan_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤:", reply_markup=keyboard.as_markup())

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"‚úÖ [User {user_id}] –ö–∞–º–ø–∞–Ω–∏—è {campaign.campaign_id} –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º campaign_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            campaign_id=campaign.campaign_id
        )

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


# üìå 2. –í—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
@router.callback_query(lambda c: c.data.startswith("view_content_plan:"))
async def view_content_plan(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ª–Ω—É.
    """
    content_plan_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üìå [User {user_id}] –≤—ã–±—Ä–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
        content_plan = db.query(ContentPlan).filter_by(content_plan_id=content_plan_id).first()
        if not content_plan:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ª–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
        waves = db.query(Waves).filter_by(content_plan_id=content_plan_id).all()

        if not waves:
            await callback.message.reply("–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ª–Ω.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        keyboard = InlineKeyboardBuilder()
        for wave in waves:
            keyboard.add(InlineKeyboardButton(
                text=f"{wave.subject} ({wave.send_date.strftime('%Y-%m-%d')})",
                callback_data=f"view_wave:{wave.wave_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–æ–ª–Ω
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞:", reply_markup=keyboard.as_markup())

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"‚úÖ [User {user_id}] –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω {content_plan_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(waves)} –≤–æ–ª–Ω.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º content_plan_id –≤ FSM
        await state.update_data(content_plan_id=content_plan_id)

    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {content_plan_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()


# üìå 3. –ó–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–æ–ª–Ω—ã
@router.callback_query(lambda c: c.data.startswith("view_wave:"))
async def view_wave(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    wave_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    db = SessionLocal()

    logger.info(f"üåä [User {user_id}] –≤—ã–±—Ä–∞–ª –≤–æ–ª–Ω—É {wave_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ª–Ω—É
        wave = db.query(Waves).filter_by(wave_id=wave_id).first()
        if not wave:
            await callback.message.reply("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ —Å–≤—è–∑—å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if not wave.template:
            await callback.message.reply("–î–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        template = wave.template

        # –õ–æ–≥–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logger.info(f"üìÑ [User {user_id}] –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω:\n"
                    f"üìå –¢–µ–º–∞: {template.subject}\n"
                    f"‚úâÔ∏è –¢–µ–∫—Å—Ç: {template.template_content[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à–∞–±–ª–æ–Ω
        template_message = (
            f"üì© **–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞**\n\n"
            f"üìå **–¢–µ–º–∞:** {template.subject}\n\n"
            f"‚úâÔ∏è **–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:**\n{template.template_content}"
        )
        await callback.message.reply(template_message)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úèÔ∏è –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_template:{wave_id}"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_edit"))

        await callback.message.reply("–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã –º–æ–∂–µ—Ç–µ —É—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.", reply_markup=keyboard.as_markup())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º wave_id –≤ FSM
        await state.update_data(wave_id=wave_id)
    except Exception as e:
        logger.error(f"‚ùå [User {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã {wave_id}: {e}", exc_info=True)
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()