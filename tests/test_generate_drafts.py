import pytest
import pandas as pd
from unittest.mock import AsyncMock, patch
from sqlalchemy.orm import Session
from db.models import Waves, Templates
from db.db_draft import generate_drafts_for_wave, generate_draft_for_lead
from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model

@pytest.mark.asyncio
async def test_generate_drafts_for_wave(mocker):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É."""

    # üîπ –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db_mock = mocker.MagicMock(spec=Session)

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–æ–ª–Ω—É
    test_wave = Waves(
        wave_id=1,
        content_plan_id=10,
        campaign_id=100,
        company_id=200,
        send_date=None,  # –î–∞—Ç–∞ –Ω–µ –≤–∞–∂–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        subject="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –ø–∏—Å—å–º–∞"
    )

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
    test_template = Templates(
        content_plan_id=10,
        text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {company_name}! –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
    )

    # üîπ –ú–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    db_mock.query().filter_by().first.return_value = test_template

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤
    test_leads = pd.DataFrame([
        {"lead_id": 1, "email": "test1@example.com", "company_name": "–ö–æ–º–ø–∞–Ω–∏—è 1"},
        {"lead_id": 2, "email": "test2@example.com", "company_name": "–ö–æ–º–ø–∞–Ω–∏—è 2"},
    ])

    # üîπ –ú–æ–∫–∏—Ä—É–µ–º send_to_model (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –º–æ–¥–µ–ª–∏)
    mocker.patch("utils.utils.send_to_model", new=AsyncMock(return_value="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ"))

    # üîπ –ú–æ–∫–∏—Ä—É–µ–º generate_draft_for_lead, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    mock_generate_draft = mocker.patch("db.db_draft.generate_draft_for_lead", new=AsyncMock())
    mock_generate_draft.side_effect = lambda template, lead, subject, wave_id: {
        "wave_id": wave_id,
        "lead_id": lead["lead_id"],
        "email": lead["email"],
        "company_name": lead["company_name"],
        "subject": subject,
        "text": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ"
    }

    # üîπ –ú–æ–∫–∏—Ä—É–µ–º append_drafts_to_sheet, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –≤ Google
    append_mock = mocker.patch("utils.google_doc.append_drafts_to_sheet", return_value=None)

    # üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
    await generate_drafts_for_wave(db_mock, test_leads, test_wave)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `generate_draft_for_lead` –≤—ã–∑–≤–∞–ª—Å—è 2 —Ä–∞–∑–∞ (–ø–æ —á–∏—Å–ª—É –ª–∏–¥–æ–≤)
    assert mock_generate_draft.call_count == 2

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `append_drafts_to_sheet` –≤—ã–∑–≤–∞–ª—Å—è
    append_mock.assert_called_once()

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    saved_drafts = append_mock.call_args[0][2]  # –ê—Ä–≥—É–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤

    assert len(saved_drafts) == 2  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    assert saved_drafts[0]["email"] == "test1@example.com"
    assert saved_drafts[1]["email"] == "test2@example.com"
    assert saved_drafts[0]["subject"] == "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –ø–∏—Å—å–º–∞"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—É
    assert "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ" in saved_drafts[0]["text"]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞