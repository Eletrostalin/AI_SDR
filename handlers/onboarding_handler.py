from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from config import OPENAI_API_KEY
from db.db import SessionLocal
from db.models import CompanyInfo
from promts.onboarding_promt import NEUTRAL_REFINEMENT_PROMPT, FIRST_QUESTION_PROMPT, EXTRACTOR_PROMPT
from states.states import OnboardingState
from langchain.agents import Tool
from langchain.chains import LLMChain
from langchain.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
import json
import logging

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –º–æ–¥–µ–ª–∏
llm = ChatOpenAI(openai_api_key=OPENAI_API_KEY, temperature=0.7)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ LangChain
extractor_prompt = ChatPromptTemplate.from_template(EXTRACTOR_PROMPT)
extractor_chain = LLMChain(llm=llm, prompt=extractor_prompt)
extractor_tool = Tool(name="Extractor", func=extractor_chain.run, description="–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞")

first_question_prompt = ChatPromptTemplate.from_template(FIRST_QUESTION_PROMPT)
first_question_chain = LLMChain(llm=llm, prompt=first_question_prompt)
first_question_tool = Tool(name="FirstQuestionGenerator", func=first_question_chain.run,
                           description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

neutral_refinement_prompt = ChatPromptTemplate.from_template(NEUTRAL_REFINEMENT_PROMPT)
neutral_question_chain = LLMChain(llm=llm, prompt=neutral_refinement_prompt)
neutral_question_tool = Tool(name="NeutralQuestionGenerator", func=neutral_question_chain.run,
                             description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å")


@router.message(OnboardingState.waiting_for_company_name)
async def handle_company_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ LangChain.
    """
    extracted_response = extractor_tool.run({"input": message.text})
    data = json.loads(extracted_response)
    await state.update_data(data=data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    missing_fields = [field for field, value in data.items() if not value and field != "additional_info"]

    if not missing_fields:
        await state.set_state(OnboardingState.showing_collected_data)
        await show_collected_data(message, state)
    else:
        await state.update_data(missing_fields=missing_fields)
        question = first_question_tool.run({"missing_fields": ", ".join(missing_fields)})
        await message.answer(question)
        await state.set_state(OnboardingState.waiting_for_missing_data)


@router.message(OnboardingState.waiting_for_missing_data)
async def handle_missing_data(message: Message, state: FSMContext):
    """
    –£—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LangChain.
    """
    data = await state.get_data()
    missing_fields = data.get("missing_fields", [])

    logger.debug(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º: {data}")

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    refined_response = extractor_tool.run({"input": message.text})
    refined_data = json.loads(refined_response)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for field in missing_fields:
        if refined_data.get(field):
            data[field] = refined_data[field]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    missing_fields = [field for field in missing_fields if not data.get(field)]
    await state.update_data(data)
    await state.update_data(missing_fields=missing_fields)

    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {data}")

    if not missing_fields:
        logger.debug("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.")
        await state.set_state(OnboardingState.showing_collected_data)
        await show_collected_data(message, state)
    else:
        question = neutral_question_tool.run({"missing_fields": ", ".join(missing_fields)})
        await message.answer(question)


async def show_collected_data(message: Message, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {data}")

    summary = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {data.get('industry', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–†–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã: {data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"Email: {data.get('contact_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('additional_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞'. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'."
    )
    await message.answer(summary)
    await state.set_state(OnboardingState.confirmation)


@router.message(OnboardingState.confirmation)
async def handle_confirmation(message: Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    data = await state.get_data()
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {data}")

    if message.text.lower() == "–¥–∞":
        company_id = data.get("company_id")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ company_id, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not company_id:
            logger.warning("company_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
            company_id = int(f"{abs(message.chat.id)}{int(message.date.timestamp())}")
            data["company_id"] = company_id
            await state.update_data(company_id=company_id)

        db: Session = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º company_id
            existing_company = db.query(CompanyInfo).filter_by(company_id=company_id).first()
            if existing_company:
                logger.info(f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.")
                existing_company.company_name = data.get("company_name")
                existing_company.industry = data.get("industry")
                existing_company.region = data.get("region")
                existing_company.contact_email = data.get("contact_email")
                existing_company.contact_phone = data.get("contact_phone")
                existing_company.additional_info = data.get("additional_info")
            else:
                logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID {company_id}.")
                company_info = CompanyInfo(
                    company_id=company_id,
                    company_name=data.get("company_name"),
                    industry=data.get("industry"),
                    region=data.get("region"),
                    contact_email=data.get("contact_email"),
                    contact_phone=data.get("contact_phone"),
                    additional_info=data.get("additional_info"),
                )
                db.add(company_info)

            db.commit()
            logger.info("–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            await message.answer(
                "üéâ –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            db.close()

        await state.clear()
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ.")
    else:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.set_state(OnboardingState.waiting_for_company_name)
        await message.answer("–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")