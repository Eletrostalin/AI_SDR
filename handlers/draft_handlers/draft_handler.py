import asyncio
import json
import random
import pandas as pd
from sqlalchemy.orm import Session

from config import DATABASE_URL
from db.models import Templates
from logger import logger
from utils.google_doc import append_drafts_to_sheet
from utils.utils import send_to_model

# üîπ ID Google –¢–∞–±–ª–∏—Ü—ã
SHEET_ID = "1YXv8CcjB_iOhDKAJZMkUV7BAmKE9x1kUrsN6cCWg2I8"
SHEET_NAME = "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏"

# üîπ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤
TEST_LEADS = pd.DataFrame([
    {"lead_id": 1, "email": "test1@example.com", "company_name": "–û–û–û \"–î–µ–ª—å—Ç–∞–±–∏–æ\"", "region": "–≥ –ú–æ—Å–∫–≤–∞", "revenue": 236265000, "employees": 90},
    {"lead_id": 2, "email": "test2@example.com", "company_name": "–û–û–û \"–ê—Ä–∫–∞–¥–∞\"", "region": "–≥ –ú–æ—Å–∫–≤–∞", "revenue": 223247000, "employees": 80},
    {"lead_id": 3, "email": "pros@prosv.ru", "company_name": "–ê–û \"–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ\"", "region": "–≥ –ú–æ—Å–∫–≤–∞", "revenue": 47768612000, "employees": 700}
])

# üîπ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–æ–ª–Ω—ã
TEST_WAVE = {
    "wave_id": 22,
    "content_plan_id": 25,
    "campaign_id": 59,
    "company_id": 121,
    "send_date": "2025-03-10 00:00:00",
    "subject": "–ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞"  # üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤–æ–ª–Ω—ã
}


async def generate_drafts_for_wave(db: Session, df, wave):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É.

    :param db: –°–µ—Å—Å–∏—è –ë–î.
    :param df: DataFrame —Å –ª–∏–¥–∞–º–∏.
    :param wave: –î–∞–Ω–Ω—ã–µ –≤–æ–ª–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id} (–∫–æ–ª-–≤–æ –ª–∏–¥–æ–≤: {len(df)})")

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
    template = db.query(Templates).filter_by(wave_id=wave.wave_id).first()
    if not template:
        logger.error(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ–ª–Ω—ã ID {wave.wave_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    email_subject = wave.subject  # üîπ –¢–µ–ø–µ—Ä—å –±–µ—Ä—ë–º —Ç–µ–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

    batch_size = 50
    leads_batches = [df[i:i + batch_size] for i in range(0, len(df), batch_size)]

    for batch in leads_batches:
        tasks = []
        for _, lead in batch.iterrows():
            tasks.append(generate_draft_for_lead(template, lead, email_subject, wave.wave_id))

        results = await asyncio.gather(*tasks)

        successful_drafts = [res for res in results if res]
        append_drafts_to_sheet(SHEET_ID, SHEET_NAME, successful_drafts)


async def generate_draft_for_lead(template, lead_data, subject, wave_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞ –¥–ª—è –ª–∏–¥–∞.

    :param template: –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞.
    :param lead_data: –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ (dict).
    :param subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞ (–±–µ—Ä—ë—Ç—Å—è –∏–∑ –≤–æ–ª–Ω—ã).
    :param wave_id: ID –≤–æ–ª–Ω—ã.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º.
    """
    lead_id = lead_data.get("lead_id")
    email = lead_data.get("email")
    company_name = lead_data.get("company_name", "–ö–ª–∏–µ–Ω—Ç")
    region = lead_data.get("region", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    revenue = lead_data.get("revenue", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    employees = lead_data.get("employees", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {company_name} (lead_id={lead_id})...")

    # üìå **–§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π prompt –¥–ª—è –º–æ–¥–µ–ª–∏**
    prompt = f"""
    –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:
    {template.template_content}

    –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
    - –ù–∞–∑–≤–∞–Ω–∏–µ: {company_name}
    - –†–µ–≥–∏–æ–Ω: {region}
    - –í—ã—Ä—É—á–∫–∞: {revenue}
    - –ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees}

    üéØ –ó–∞–¥–∞—á–∞:
    - –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
    - –ü–æ–¥—Å—Ç—Ä–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {employees} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–º–∞–ª—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–∫—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å).
    - –£–ø–æ–º—è–Ω–∏ —Ä–µ–≥–∏–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ ({region}).
    - –°–¥–µ–ª–∞–π –ø–∏—Å—å–º–æ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.
    - –ü–µ—Ä–µ–º–µ—à–∞–π –∞–±–∑–∞—Ü—ã, –¥–æ–±–∞–≤—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.
    - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (–Ω–µ –∫–æ–ø–∏—Ä—É–π 1 –≤ 1 —à–∞–±–ª–æ–Ω).
    """

    # üîπ 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–¥–µ–ª–∏
    for attempt in range(3):
        try:
            response = send_to_model(prompt)  # ‚úÖ –£–±—Ä–∞–ª–∏ `await`, –µ—Å–ª–∏ send_to_model –Ω–µ async
            if not response:
                raise ValueError("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç")
            break  # –£—Å–ø–µ—Ö
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è lead_id={lead_id}: {e}")
            if attempt == 2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è lead_id={lead_id}", exc_info=True)
                return None
            await asyncio.sleep(2)

    draft = {
        "wave_id": wave_id,
        "lead_id": lead_id,
        "email": email,
        "company_name": company_name,
        "subject": subject,  # üîπ –¢–µ–ø–µ—Ä—å subject –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –æ–¥–∏–Ω –¥–ª—è –≤—Å–µ—Ö –ø–∏—Å–µ–º
        "text": response.strip()
    }

    logger.debug(f"üì© –ò—Ç–æ–≥–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è {company_name}: {draft}")
    return draft


# üîπ **–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞**
async def run_test():
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker

    # **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î**
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()

    try:
        await generate_drafts_for_wave(db, TEST_LEADS, TEST_WAVE)
    finally:
        db.close()


if __name__ == "__main__":
    asyncio.run(run_test())